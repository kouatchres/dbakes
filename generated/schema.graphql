### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Cart {
  Product: Product!
  id: String!
  orderDate: DateTime!
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
}

input CartCreateInput {
  Client: ClientCreateNestedOneWithoutCartsInput!
  Employee: EmployeeCreateNestedOneWithoutCartsInput!
  Product: ProductCreateNestedOneWithoutCartsInput!
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input CartCreateManyClientInput {
  createdAt: DateTime
  employeeId: String!
  id: String
  orderDate: DateTime
  pdtCost: Int!
  productId: String!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input CartCreateManyClientInputEnvelope {
  data: [CartCreateManyClientInput!]
  skipDuplicates: Boolean
}

input CartCreateManyEmployeeInput {
  clientId: String!
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  productId: String!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input CartCreateManyEmployeeInputEnvelope {
  data: [CartCreateManyEmployeeInput!]
  skipDuplicates: Boolean
}

input CartCreateManyProductInput {
  clientId: String!
  createdAt: DateTime
  employeeId: String!
  id: String
  orderDate: DateTime
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input CartCreateManyProductInputEnvelope {
  data: [CartCreateManyProductInput!]
  skipDuplicates: Boolean
}

input CartCreateNestedManyWithoutClientInput {
  connect: [CartWhereUniqueInput!]
  connectOrCreate: [CartCreateOrConnectWithoutClientInput!]
  create: [CartCreateWithoutClientInput!]
  createMany: CartCreateManyClientInputEnvelope
}

input CartCreateNestedManyWithoutEmployeeInput {
  connect: [CartWhereUniqueInput!]
  connectOrCreate: [CartCreateOrConnectWithoutEmployeeInput!]
  create: [CartCreateWithoutEmployeeInput!]
  createMany: CartCreateManyEmployeeInputEnvelope
}

input CartCreateNestedManyWithoutProductInput {
  connect: [CartWhereUniqueInput!]
  connectOrCreate: [CartCreateOrConnectWithoutProductInput!]
  create: [CartCreateWithoutProductInput!]
  createMany: CartCreateManyProductInputEnvelope
}

input CartCreateOrConnectWithoutClientInput {
  create: CartCreateWithoutClientInput!
  where: CartWhereUniqueInput!
}

input CartCreateOrConnectWithoutEmployeeInput {
  create: CartCreateWithoutEmployeeInput!
  where: CartWhereUniqueInput!
}

input CartCreateOrConnectWithoutProductInput {
  create: CartCreateWithoutProductInput!
  where: CartWhereUniqueInput!
}

input CartCreateWithoutClientInput {
  Employee: EmployeeCreateNestedOneWithoutCartsInput!
  Product: ProductCreateNestedOneWithoutCartsInput!
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input CartCreateWithoutEmployeeInput {
  Client: ClientCreateNestedOneWithoutCartsInput!
  Product: ProductCreateNestedOneWithoutCartsInput!
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input CartCreateWithoutProductInput {
  Client: ClientCreateNestedOneWithoutCartsInput!
  Employee: EmployeeCreateNestedOneWithoutCartsInput!
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input CartScalarWhereInput {
  AND: [CartScalarWhereInput!]
  NOT: [CartScalarWhereInput!]
  OR: [CartScalarWhereInput!]
  clientId: StringFilter
  createdAt: DateTimeFilter
  employeeId: StringFilter
  id: StringFilter
  orderDate: DateTimeFilter
  pdtCost: IntFilter
  productId: StringFilter
  qtty: FloatFilter
  salesPrice: IntFilter
  updatedAt: DateTimeFilter
}

input CartUpdateInput {
  Client: ClientUpdateOneRequiredWithoutCartsInput
  Employee: EmployeeUpdateOneRequiredWithoutCartsInput
  Product: ProductUpdateOneRequiredWithoutCartsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartUpdateManyWithWhereWithoutClientInput {
  data: CartUpdateManyMutationInput!
  where: CartScalarWhereInput!
}

input CartUpdateManyWithWhereWithoutEmployeeInput {
  data: CartUpdateManyMutationInput!
  where: CartScalarWhereInput!
}

input CartUpdateManyWithWhereWithoutProductInput {
  data: CartUpdateManyMutationInput!
  where: CartScalarWhereInput!
}

input CartUpdateManyWithoutClientInput {
  connect: [CartWhereUniqueInput!]
  connectOrCreate: [CartCreateOrConnectWithoutClientInput!]
  create: [CartCreateWithoutClientInput!]
  createMany: CartCreateManyClientInputEnvelope
  delete: [CartWhereUniqueInput!]
  deleteMany: [CartScalarWhereInput!]
  disconnect: [CartWhereUniqueInput!]
  set: [CartWhereUniqueInput!]
  update: [CartUpdateWithWhereUniqueWithoutClientInput!]
  updateMany: [CartUpdateManyWithWhereWithoutClientInput!]
  upsert: [CartUpsertWithWhereUniqueWithoutClientInput!]
}

input CartUpdateManyWithoutEmployeeInput {
  connect: [CartWhereUniqueInput!]
  connectOrCreate: [CartCreateOrConnectWithoutEmployeeInput!]
  create: [CartCreateWithoutEmployeeInput!]
  createMany: CartCreateManyEmployeeInputEnvelope
  delete: [CartWhereUniqueInput!]
  deleteMany: [CartScalarWhereInput!]
  disconnect: [CartWhereUniqueInput!]
  set: [CartWhereUniqueInput!]
  update: [CartUpdateWithWhereUniqueWithoutEmployeeInput!]
  updateMany: [CartUpdateManyWithWhereWithoutEmployeeInput!]
  upsert: [CartUpsertWithWhereUniqueWithoutEmployeeInput!]
}

input CartUpdateManyWithoutProductInput {
  connect: [CartWhereUniqueInput!]
  connectOrCreate: [CartCreateOrConnectWithoutProductInput!]
  create: [CartCreateWithoutProductInput!]
  createMany: CartCreateManyProductInputEnvelope
  delete: [CartWhereUniqueInput!]
  deleteMany: [CartScalarWhereInput!]
  disconnect: [CartWhereUniqueInput!]
  set: [CartWhereUniqueInput!]
  update: [CartUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [CartUpdateManyWithWhereWithoutProductInput!]
  upsert: [CartUpsertWithWhereUniqueWithoutProductInput!]
}

input CartUpdateWithWhereUniqueWithoutClientInput {
  data: CartUpdateWithoutClientInput!
  where: CartWhereUniqueInput!
}

input CartUpdateWithWhereUniqueWithoutEmployeeInput {
  data: CartUpdateWithoutEmployeeInput!
  where: CartWhereUniqueInput!
}

input CartUpdateWithWhereUniqueWithoutProductInput {
  data: CartUpdateWithoutProductInput!
  where: CartWhereUniqueInput!
}

input CartUpdateWithoutClientInput {
  Employee: EmployeeUpdateOneRequiredWithoutCartsInput
  Product: ProductUpdateOneRequiredWithoutCartsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartUpdateWithoutEmployeeInput {
  Client: ClientUpdateOneRequiredWithoutCartsInput
  Product: ProductUpdateOneRequiredWithoutCartsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartUpdateWithoutProductInput {
  Client: ClientUpdateOneRequiredWithoutCartsInput
  Employee: EmployeeUpdateOneRequiredWithoutCartsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartUpsertWithWhereUniqueWithoutClientInput {
  create: CartCreateWithoutClientInput!
  update: CartUpdateWithoutClientInput!
  where: CartWhereUniqueInput!
}

input CartUpsertWithWhereUniqueWithoutEmployeeInput {
  create: CartCreateWithoutEmployeeInput!
  update: CartUpdateWithoutEmployeeInput!
  where: CartWhereUniqueInput!
}

input CartUpsertWithWhereUniqueWithoutProductInput {
  create: CartCreateWithoutProductInput!
  update: CartUpdateWithoutProductInput!
  where: CartWhereUniqueInput!
}

input CartWhereUniqueInput {
  id: String
}

type Category {
  categoryCode: String!
  categoryName: String!
  id: String!
  products(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int): [Product!]!
}

input CategoryCreateInput {
  categoryCode: String!
  categoryName: String!
  createdAt: DateTime
  id: String
  products: ProductCreateNestedManyWithoutCategoryInput
  updatedAt: DateTime
}

input CategoryCreateNestedOneWithoutProductsInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutProductsInput
  create: CategoryCreateWithoutProductsInput
}

input CategoryCreateOrConnectWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutProductsInput {
  categoryCode: String!
  categoryName: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input CategoryUpdateInput {
  categoryCode: StringFieldUpdateOperationsInput
  categoryName: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutCategoryInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateOneRequiredWithoutProductsInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutProductsInput
  create: CategoryCreateWithoutProductsInput
  update: CategoryUpdateWithoutProductsInput
  upsert: CategoryUpsertWithoutProductsInput
}

input CategoryUpdateWithoutProductsInput {
  categoryCode: StringFieldUpdateOperationsInput
  categoryName: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpsertWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput!
  update: CategoryUpdateWithoutProductsInput!
}

input CategoryWhereUniqueInput {
  id: String
}

type Client {
  clientNames: String!
  clientPhoneNumb: Int!
  id: String!
}

input ClientCreateInput {
  carts: CartCreateNestedManyWithoutClientInput
  clientNames: String!
  clientPhoneNumb: Int!
  createdAt: DateTime
  id: String
  orders: OrderCreateNestedManyWithoutClientInput
  updatedAt: DateTime
}

input ClientCreateNestedOneWithoutCartsInput {
  connect: ClientWhereUniqueInput
  connectOrCreate: ClientCreateOrConnectWithoutCartsInput
  create: ClientCreateWithoutCartsInput
}

input ClientCreateNestedOneWithoutOrdersInput {
  connect: ClientWhereUniqueInput
  connectOrCreate: ClientCreateOrConnectWithoutOrdersInput
  create: ClientCreateWithoutOrdersInput
}

input ClientCreateOrConnectWithoutCartsInput {
  create: ClientCreateWithoutCartsInput!
  where: ClientWhereUniqueInput!
}

input ClientCreateOrConnectWithoutOrdersInput {
  create: ClientCreateWithoutOrdersInput!
  where: ClientWhereUniqueInput!
}

input ClientCreateWithoutCartsInput {
  clientNames: String!
  clientPhoneNumb: Int!
  createdAt: DateTime
  id: String
  orders: OrderCreateNestedManyWithoutClientInput
  updatedAt: DateTime
}

input ClientCreateWithoutOrdersInput {
  carts: CartCreateNestedManyWithoutClientInput
  clientNames: String!
  clientPhoneNumb: Int!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input ClientUpdateInput {
  carts: CartUpdateManyWithoutClientInput
  clientNames: StringFieldUpdateOperationsInput
  clientPhoneNumb: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutClientInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClientUpdateOneRequiredWithoutCartsInput {
  connect: ClientWhereUniqueInput
  connectOrCreate: ClientCreateOrConnectWithoutCartsInput
  create: ClientCreateWithoutCartsInput
  update: ClientUpdateWithoutCartsInput
  upsert: ClientUpsertWithoutCartsInput
}

input ClientUpdateOneRequiredWithoutOrdersInput {
  connect: ClientWhereUniqueInput
  connectOrCreate: ClientCreateOrConnectWithoutOrdersInput
  create: ClientCreateWithoutOrdersInput
  update: ClientUpdateWithoutOrdersInput
  upsert: ClientUpsertWithoutOrdersInput
}

input ClientUpdateWithoutCartsInput {
  clientNames: StringFieldUpdateOperationsInput
  clientPhoneNumb: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutClientInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClientUpdateWithoutOrdersInput {
  carts: CartUpdateManyWithoutClientInput
  clientNames: StringFieldUpdateOperationsInput
  clientPhoneNumb: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClientUpsertWithoutCartsInput {
  create: ClientCreateWithoutCartsInput!
  update: ClientUpdateWithoutCartsInput!
}

input ClientUpsertWithoutOrdersInput {
  create: ClientCreateWithoutOrdersInput!
  update: ClientUpdateWithoutOrdersInput!
}

input ClientWhereUniqueInput {
  clientPhoneNumb: Int
  id: String
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Employee {
  employeeCode: String!
  employeeNames: String!
  employeePhoneNumb: Int!
  id: String!
}

input EmployeeCreateInput {
  carts: CartCreateNestedManyWithoutEmployeeInput
  createdAt: DateTime
  employeeCode: String!
  employeeNames: String!
  employeePhoneNumb: Int!
  id: String
  orders: OrderCreateNestedManyWithoutEmployeeInput
  updatedAt: DateTime
}

input EmployeeCreateNestedOneWithoutCartsInput {
  connect: EmployeeWhereUniqueInput
  connectOrCreate: EmployeeCreateOrConnectWithoutCartsInput
  create: EmployeeCreateWithoutCartsInput
}

input EmployeeCreateNestedOneWithoutOrdersInput {
  connect: EmployeeWhereUniqueInput
  connectOrCreate: EmployeeCreateOrConnectWithoutOrdersInput
  create: EmployeeCreateWithoutOrdersInput
}

input EmployeeCreateOrConnectWithoutCartsInput {
  create: EmployeeCreateWithoutCartsInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeCreateOrConnectWithoutOrdersInput {
  create: EmployeeCreateWithoutOrdersInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeCreateWithoutCartsInput {
  createdAt: DateTime
  employeeCode: String!
  employeeNames: String!
  employeePhoneNumb: Int!
  id: String
  orders: OrderCreateNestedManyWithoutEmployeeInput
  updatedAt: DateTime
}

input EmployeeCreateWithoutOrdersInput {
  carts: CartCreateNestedManyWithoutEmployeeInput
  createdAt: DateTime
  employeeCode: String!
  employeeNames: String!
  employeePhoneNumb: Int!
  id: String
  updatedAt: DateTime
}

type EmployeeStatus {
  id: String!
  status: String!
}

input EmployeeStatusCreateInput {
  createdAt: DateTime
  id: String
  status: String!
  updatedAt: DateTime
}

input EmployeeStatusUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeStatusWhereUniqueInput {
  id: String
}

input EmployeeUpdateInput {
  carts: CartUpdateManyWithoutEmployeeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  employeeCode: StringFieldUpdateOperationsInput
  employeeNames: StringFieldUpdateOperationsInput
  employeePhoneNumb: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutEmployeeInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeUpdateOneRequiredWithoutCartsInput {
  connect: EmployeeWhereUniqueInput
  connectOrCreate: EmployeeCreateOrConnectWithoutCartsInput
  create: EmployeeCreateWithoutCartsInput
  update: EmployeeUpdateWithoutCartsInput
  upsert: EmployeeUpsertWithoutCartsInput
}

input EmployeeUpdateOneRequiredWithoutOrdersInput {
  connect: EmployeeWhereUniqueInput
  connectOrCreate: EmployeeCreateOrConnectWithoutOrdersInput
  create: EmployeeCreateWithoutOrdersInput
  update: EmployeeUpdateWithoutOrdersInput
  upsert: EmployeeUpsertWithoutOrdersInput
}

input EmployeeUpdateWithoutCartsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  employeeCode: StringFieldUpdateOperationsInput
  employeeNames: StringFieldUpdateOperationsInput
  employeePhoneNumb: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutEmployeeInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeUpdateWithoutOrdersInput {
  carts: CartUpdateManyWithoutEmployeeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  employeeCode: StringFieldUpdateOperationsInput
  employeeNames: StringFieldUpdateOperationsInput
  employeePhoneNumb: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeUpsertWithoutCartsInput {
  create: EmployeeCreateWithoutCartsInput!
  update: EmployeeUpdateWithoutCartsInput!
}

input EmployeeUpsertWithoutOrdersInput {
  create: EmployeeCreateWithoutOrdersInput!
  update: EmployeeUpdateWithoutOrdersInput!
}

input EmployeeWhereUniqueInput {
  employeeCode: String
  employeePhoneNumb: Int
  id: String
}

type Finance {
  Order: Order!
  amtPaid: Int!
  id: String!
  orderId: String!
}

input FinanceCreateInput {
  Order: OrderCreateNestedOneWithoutFinancesInput!
  amtPaid: Int!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input FinanceCreateManyOrderInput {
  amtPaid: Int!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input FinanceCreateManyOrderInputEnvelope {
  data: [FinanceCreateManyOrderInput!]
  skipDuplicates: Boolean
}

input FinanceCreateNestedManyWithoutOrderInput {
  connect: [FinanceWhereUniqueInput!]
  connectOrCreate: [FinanceCreateOrConnectWithoutOrderInput!]
  create: [FinanceCreateWithoutOrderInput!]
  createMany: FinanceCreateManyOrderInputEnvelope
}

input FinanceCreateOrConnectWithoutOrderInput {
  create: FinanceCreateWithoutOrderInput!
  where: FinanceWhereUniqueInput!
}

input FinanceCreateWithoutOrderInput {
  amtPaid: Int!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input FinanceScalarWhereInput {
  AND: [FinanceScalarWhereInput!]
  NOT: [FinanceScalarWhereInput!]
  OR: [FinanceScalarWhereInput!]
  amtPaid: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  orderId: StringFilter
  updatedAt: DateTimeFilter
}

input FinanceUpdateInput {
  Order: OrderUpdateOneRequiredWithoutFinancesInput
  amtPaid: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FinanceUpdateManyMutationInput {
  amtPaid: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FinanceUpdateManyWithWhereWithoutOrderInput {
  data: FinanceUpdateManyMutationInput!
  where: FinanceScalarWhereInput!
}

input FinanceUpdateManyWithoutOrderInput {
  connect: [FinanceWhereUniqueInput!]
  connectOrCreate: [FinanceCreateOrConnectWithoutOrderInput!]
  create: [FinanceCreateWithoutOrderInput!]
  createMany: FinanceCreateManyOrderInputEnvelope
  delete: [FinanceWhereUniqueInput!]
  deleteMany: [FinanceScalarWhereInput!]
  disconnect: [FinanceWhereUniqueInput!]
  set: [FinanceWhereUniqueInput!]
  update: [FinanceUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [FinanceUpdateManyWithWhereWithoutOrderInput!]
  upsert: [FinanceUpsertWithWhereUniqueWithoutOrderInput!]
}

input FinanceUpdateWithWhereUniqueWithoutOrderInput {
  data: FinanceUpdateWithoutOrderInput!
  where: FinanceWhereUniqueInput!
}

input FinanceUpdateWithoutOrderInput {
  amtPaid: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FinanceUpsertWithWhereUniqueWithoutOrderInput {
  create: FinanceCreateWithoutOrderInput!
  update: FinanceUpdateWithoutOrderInput!
  where: FinanceWhereUniqueInput!
}

input FinanceWhereUniqueInput {
  id: String
}

type FinancialYear {
  id: String!
  yearName: Int!
}

input FinancialYearCreateInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  yearName: Int!
}

input FinancialYearUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  yearName: IntFieldUpdateOperationsInput
}

input FinancialYearWhereUniqueInput {
  id: String
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  """Stores a Cart manually"""
  createCart(data: CartCreateInput!): Cart

  """Stores a Category manually"""
  createCategory(data: CategoryCreateInput!): Category

  """Stores a Client manually"""
  createClient(data: ClientCreateInput!): Client

  """Stores a Employee manually"""
  createEmployee(data: EmployeeCreateInput!): Employee

  """Stores a EmployeeStatus manually"""
  createEmployeeStatus(data: EmployeeStatusCreateInput!): EmployeeStatus

  """Stores a Finance manually"""
  createFinance(data: FinanceCreateInput!): Finance

  """Stores a FinancialYear manually"""
  createFinancialYear(data: FinancialYearCreateInput!): FinancialYear
  createOneCart(data: CartCreateInput!): Cart!
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneClient(data: ClientCreateInput!): Client!
  createOneEmployee(data: EmployeeCreateInput!): Employee!
  createOneEmployeeStatus(data: EmployeeStatusCreateInput!): EmployeeStatus!
  createOneFinance(data: FinanceCreateInput!): Finance!
  createOneFinancialYear(data: FinancialYearCreateInput!): FinancialYear!
  createOneOrder(data: OrderCreateInput!): Order!
  createOneOrderDetail(data: OrderDetailCreateInput!): OrderDetail!
  createOneOrderType(data: OrderTypeCreateInput!): OrderType!
  createOneProduct(data: ProductCreateInput!): Product!

  """Stores an  Order manually"""
  createOrder(data: OrderCreateInput!): Order

  """Stores a OrderDetail manually"""
  createOrderDetail(data: OrderDetailCreateInput!): OrderDetail

  """Stores a OrderType manually"""
  createOrderType(data: OrderTypeCreateInput!): OrderType

  """Stores a Product manually"""
  createProduct(data: ProductCreateInput!): Product

  """deletes a cart manually"""
  deleteCart(where: CartWhereUniqueInput!): Cart

  """deletes a category manually"""
  deleteCategory(where: CategoryWhereUniqueInput!): Category

  """deletes a client manually"""
  deleteClient(where: ClientWhereUniqueInput!): Client

  """deletes a employee manually"""
  deleteEmployee(where: EmployeeWhereUniqueInput!): Employee

  """deletes a employeeStatus manually"""
  deleteEmployeeStatus(where: EmployeeStatusWhereUniqueInput!): EmployeeStatus

  """deletes a finance manually"""
  deleteFinance(where: FinanceWhereUniqueInput!): Finance

  """deletes a financialYear manually"""
  deleteFinancialYear(where: FinancialYearWhereUniqueInput!): FinancialYear
  deleteOneCart(where: CartWhereUniqueInput!): Cart
  deleteOneCategory(where: CategoryWhereUniqueInput!): Category
  deleteOneClient(where: ClientWhereUniqueInput!): Client
  deleteOneEmployee(where: EmployeeWhereUniqueInput!): Employee
  deleteOneEmployeeStatus(where: EmployeeStatusWhereUniqueInput!): EmployeeStatus
  deleteOneFinance(where: FinanceWhereUniqueInput!): Finance
  deleteOneFinancialYear(where: FinancialYearWhereUniqueInput!): FinancialYear
  deleteOneOrder(where: OrderWhereUniqueInput!): Order
  deleteOneOrderDetail(where: OrderDetailWhereUniqueInput!): OrderDetail
  deleteOneOrderType(where: OrderTypeWhereUniqueInput!): OrderType
  deleteOneProduct(where: ProductWhereUniqueInput!): Product

  """deletes a Order manually"""
  deleteOrder(where: OrderWhereUniqueInput!): Order

  """deletes a OrderDetail manually"""
  deleteOrderDetail(where: OrderDetailWhereUniqueInput!): OrderDetail

  """deletes a orderType manually"""
  deleteOrderType(where: OrderTypeWhereUniqueInput!): OrderType

  """deletes a Product manually"""
  deleteProduct(where: ProductWhereUniqueInput!): Product
  updateOneCart(data: CartUpdateInput!, where: CartWhereUniqueInput!): Cart
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneClient(data: ClientUpdateInput!, where: ClientWhereUniqueInput!): Client
  updateOneEmployee(data: EmployeeUpdateInput!, where: EmployeeWhereUniqueInput!): Employee
  updateOneEmployeeStatus(data: EmployeeStatusUpdateInput!, where: EmployeeStatusWhereUniqueInput!): EmployeeStatus
  updateOneFinance(data: FinanceUpdateInput!, where: FinanceWhereUniqueInput!): Finance
  updateOneFinancialYear(data: FinancialYearUpdateInput!, where: FinancialYearWhereUniqueInput!): FinancialYear
  updateOneOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateOneOrderDetail(data: OrderDetailUpdateInput!, where: OrderDetailWhereUniqueInput!): OrderDetail
  updateOneOrderType(data: OrderTypeUpdateInput!, where: OrderTypeWhereUniqueInput!): OrderType
  updateOneProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Order {
  finances(after: FinanceWhereUniqueInput, before: FinanceWhereUniqueInput, first: Int, last: Int): [Finance!]!
  id: String!
  orderDate: DateTime!
  orderDetails(after: OrderDetailWhereUniqueInput, before: OrderDetailWhereUniqueInput, first: Int, last: Int): [OrderDetail!]!
  orderNumber: String!
  orderTotal: Int!
  totalPaid: Int!
}

input OrderCreateInput {
  Client: ClientCreateNestedOneWithoutOrdersInput!
  Employee: EmployeeCreateNestedOneWithoutOrdersInput!
  createdAt: DateTime
  finances: FinanceCreateNestedManyWithoutOrderInput
  id: String
  orderDate: DateTime
  orderDetails: OrderDetailCreateNestedManyWithoutOrderInput
  orderNumber: String!
  orderTotal: Int!
  totalPaid: Int!
  updatedAt: DateTime
}

input OrderCreateManyClientInput {
  createdAt: DateTime
  employeeId: String!
  id: String
  orderDate: DateTime
  orderNumber: String!
  orderTotal: Int!
  totalPaid: Int!
  updatedAt: DateTime
}

input OrderCreateManyClientInputEnvelope {
  data: [OrderCreateManyClientInput!]
  skipDuplicates: Boolean
}

input OrderCreateManyEmployeeInput {
  clientId: String!
  createdAt: DateTime
  id: String
  orderDate: DateTime
  orderNumber: String!
  orderTotal: Int!
  totalPaid: Int!
  updatedAt: DateTime
}

input OrderCreateManyEmployeeInputEnvelope {
  data: [OrderCreateManyEmployeeInput!]
  skipDuplicates: Boolean
}

input OrderCreateNestedManyWithoutClientInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutClientInput!]
  create: [OrderCreateWithoutClientInput!]
  createMany: OrderCreateManyClientInputEnvelope
}

input OrderCreateNestedManyWithoutEmployeeInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutEmployeeInput!]
  create: [OrderCreateWithoutEmployeeInput!]
  createMany: OrderCreateManyEmployeeInputEnvelope
}

input OrderCreateNestedOneWithoutFinancesInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutFinancesInput
  create: OrderCreateWithoutFinancesInput
}

input OrderCreateNestedOneWithoutOrderDetailsInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutOrderDetailsInput
  create: OrderCreateWithoutOrderDetailsInput
}

input OrderCreateOrConnectWithoutClientInput {
  create: OrderCreateWithoutClientInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateOrConnectWithoutEmployeeInput {
  create: OrderCreateWithoutEmployeeInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateOrConnectWithoutFinancesInput {
  create: OrderCreateWithoutFinancesInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateOrConnectWithoutOrderDetailsInput {
  create: OrderCreateWithoutOrderDetailsInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateWithoutClientInput {
  Employee: EmployeeCreateNestedOneWithoutOrdersInput!
  createdAt: DateTime
  finances: FinanceCreateNestedManyWithoutOrderInput
  id: String
  orderDate: DateTime
  orderDetails: OrderDetailCreateNestedManyWithoutOrderInput
  orderNumber: String!
  orderTotal: Int!
  totalPaid: Int!
  updatedAt: DateTime
}

input OrderCreateWithoutEmployeeInput {
  Client: ClientCreateNestedOneWithoutOrdersInput!
  createdAt: DateTime
  finances: FinanceCreateNestedManyWithoutOrderInput
  id: String
  orderDate: DateTime
  orderDetails: OrderDetailCreateNestedManyWithoutOrderInput
  orderNumber: String!
  orderTotal: Int!
  totalPaid: Int!
  updatedAt: DateTime
}

input OrderCreateWithoutFinancesInput {
  Client: ClientCreateNestedOneWithoutOrdersInput!
  Employee: EmployeeCreateNestedOneWithoutOrdersInput!
  createdAt: DateTime
  id: String
  orderDate: DateTime
  orderDetails: OrderDetailCreateNestedManyWithoutOrderInput
  orderNumber: String!
  orderTotal: Int!
  totalPaid: Int!
  updatedAt: DateTime
}

input OrderCreateWithoutOrderDetailsInput {
  Client: ClientCreateNestedOneWithoutOrdersInput!
  Employee: EmployeeCreateNestedOneWithoutOrdersInput!
  createdAt: DateTime
  finances: FinanceCreateNestedManyWithoutOrderInput
  id: String
  orderDate: DateTime
  orderNumber: String!
  orderTotal: Int!
  totalPaid: Int!
  updatedAt: DateTime
}

type OrderDetail {
  Order: Order!
  Product: Product!
  id: String!
  orderId: String!
  pdtCost: Int!
  productId: String!
  qtty: Float!
  salesPrice: Int!
}

input OrderDetailCreateInput {
  Order: OrderCreateNestedOneWithoutOrderDetailsInput!
  Product: ProductCreateNestedOneWithoutOrderDetailsInput!
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input OrderDetailCreateManyOrderInput {
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  productId: String!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input OrderDetailCreateManyOrderInputEnvelope {
  data: [OrderDetailCreateManyOrderInput!]
  skipDuplicates: Boolean
}

input OrderDetailCreateManyProductInput {
  createdAt: DateTime
  id: String
  orderDate: DateTime
  orderId: String!
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input OrderDetailCreateManyProductInputEnvelope {
  data: [OrderDetailCreateManyProductInput!]
  skipDuplicates: Boolean
}

input OrderDetailCreateNestedManyWithoutOrderInput {
  connect: [OrderDetailWhereUniqueInput!]
  connectOrCreate: [OrderDetailCreateOrConnectWithoutOrderInput!]
  create: [OrderDetailCreateWithoutOrderInput!]
  createMany: OrderDetailCreateManyOrderInputEnvelope
}

input OrderDetailCreateNestedManyWithoutProductInput {
  connect: [OrderDetailWhereUniqueInput!]
  connectOrCreate: [OrderDetailCreateOrConnectWithoutProductInput!]
  create: [OrderDetailCreateWithoutProductInput!]
  createMany: OrderDetailCreateManyProductInputEnvelope
}

input OrderDetailCreateOrConnectWithoutOrderInput {
  create: OrderDetailCreateWithoutOrderInput!
  where: OrderDetailWhereUniqueInput!
}

input OrderDetailCreateOrConnectWithoutProductInput {
  create: OrderDetailCreateWithoutProductInput!
  where: OrderDetailWhereUniqueInput!
}

input OrderDetailCreateWithoutOrderInput {
  Product: ProductCreateNestedOneWithoutOrderDetailsInput!
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input OrderDetailCreateWithoutProductInput {
  Order: OrderCreateNestedOneWithoutOrderDetailsInput!
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input OrderDetailScalarWhereInput {
  AND: [OrderDetailScalarWhereInput!]
  NOT: [OrderDetailScalarWhereInput!]
  OR: [OrderDetailScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  orderDate: DateTimeFilter
  orderId: StringFilter
  pdtCost: IntFilter
  productId: StringFilter
  qtty: FloatFilter
  salesPrice: IntFilter
  updatedAt: DateTimeFilter
}

input OrderDetailUpdateInput {
  Order: OrderUpdateOneRequiredWithoutOrderDetailsInput
  Product: ProductUpdateOneRequiredWithoutOrderDetailsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderDetailUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderDetailUpdateManyWithWhereWithoutOrderInput {
  data: OrderDetailUpdateManyMutationInput!
  where: OrderDetailScalarWhereInput!
}

input OrderDetailUpdateManyWithWhereWithoutProductInput {
  data: OrderDetailUpdateManyMutationInput!
  where: OrderDetailScalarWhereInput!
}

input OrderDetailUpdateManyWithoutOrderInput {
  connect: [OrderDetailWhereUniqueInput!]
  connectOrCreate: [OrderDetailCreateOrConnectWithoutOrderInput!]
  create: [OrderDetailCreateWithoutOrderInput!]
  createMany: OrderDetailCreateManyOrderInputEnvelope
  delete: [OrderDetailWhereUniqueInput!]
  deleteMany: [OrderDetailScalarWhereInput!]
  disconnect: [OrderDetailWhereUniqueInput!]
  set: [OrderDetailWhereUniqueInput!]
  update: [OrderDetailUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [OrderDetailUpdateManyWithWhereWithoutOrderInput!]
  upsert: [OrderDetailUpsertWithWhereUniqueWithoutOrderInput!]
}

input OrderDetailUpdateManyWithoutProductInput {
  connect: [OrderDetailWhereUniqueInput!]
  connectOrCreate: [OrderDetailCreateOrConnectWithoutProductInput!]
  create: [OrderDetailCreateWithoutProductInput!]
  createMany: OrderDetailCreateManyProductInputEnvelope
  delete: [OrderDetailWhereUniqueInput!]
  deleteMany: [OrderDetailScalarWhereInput!]
  disconnect: [OrderDetailWhereUniqueInput!]
  set: [OrderDetailWhereUniqueInput!]
  update: [OrderDetailUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [OrderDetailUpdateManyWithWhereWithoutProductInput!]
  upsert: [OrderDetailUpsertWithWhereUniqueWithoutProductInput!]
}

input OrderDetailUpdateWithWhereUniqueWithoutOrderInput {
  data: OrderDetailUpdateWithoutOrderInput!
  where: OrderDetailWhereUniqueInput!
}

input OrderDetailUpdateWithWhereUniqueWithoutProductInput {
  data: OrderDetailUpdateWithoutProductInput!
  where: OrderDetailWhereUniqueInput!
}

input OrderDetailUpdateWithoutOrderInput {
  Product: ProductUpdateOneRequiredWithoutOrderDetailsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderDetailUpdateWithoutProductInput {
  Order: OrderUpdateOneRequiredWithoutOrderDetailsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderDetailUpsertWithWhereUniqueWithoutOrderInput {
  create: OrderDetailCreateWithoutOrderInput!
  update: OrderDetailUpdateWithoutOrderInput!
  where: OrderDetailWhereUniqueInput!
}

input OrderDetailUpsertWithWhereUniqueWithoutProductInput {
  create: OrderDetailCreateWithoutProductInput!
  update: OrderDetailUpdateWithoutProductInput!
  where: OrderDetailWhereUniqueInput!
}

input OrderDetailWhereUniqueInput {
  id: String
}

input OrderScalarWhereInput {
  AND: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  clientId: StringFilter
  createdAt: DateTimeFilter
  employeeId: StringFilter
  id: StringFilter
  orderDate: DateTimeFilter
  orderNumber: StringFilter
  orderTotal: IntFilter
  totalPaid: IntFilter
  updatedAt: DateTimeFilter
}

type OrderType {
  id: String!
  orderTypeCode: String!
  orderTypeName: String!
}

input OrderTypeCreateInput {
  createdAt: DateTime
  id: String
  orderTypeCode: String!
  orderTypeName: String!
  updatedAt: DateTime
}

input OrderTypeUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderTypeCode: StringFieldUpdateOperationsInput
  orderTypeName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderTypeWhereUniqueInput {
  id: String
}

input OrderUpdateInput {
  Client: ClientUpdateOneRequiredWithoutOrdersInput
  Employee: EmployeeUpdateOneRequiredWithoutOrdersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  finances: FinanceUpdateManyWithoutOrderInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  orderDetails: OrderDetailUpdateManyWithoutOrderInput
  orderNumber: StringFieldUpdateOperationsInput
  orderTotal: IntFieldUpdateOperationsInput
  totalPaid: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  orderNumber: StringFieldUpdateOperationsInput
  orderTotal: IntFieldUpdateOperationsInput
  totalPaid: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateManyWithWhereWithoutClientInput {
  data: OrderUpdateManyMutationInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateManyWithWhereWithoutEmployeeInput {
  data: OrderUpdateManyMutationInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateManyWithoutClientInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutClientInput!]
  create: [OrderCreateWithoutClientInput!]
  createMany: OrderCreateManyClientInputEnvelope
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutClientInput!]
  updateMany: [OrderUpdateManyWithWhereWithoutClientInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutClientInput!]
}

input OrderUpdateManyWithoutEmployeeInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutEmployeeInput!]
  create: [OrderCreateWithoutEmployeeInput!]
  createMany: OrderCreateManyEmployeeInputEnvelope
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutEmployeeInput!]
  updateMany: [OrderUpdateManyWithWhereWithoutEmployeeInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutEmployeeInput!]
}

input OrderUpdateOneRequiredWithoutFinancesInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutFinancesInput
  create: OrderCreateWithoutFinancesInput
  update: OrderUpdateWithoutFinancesInput
  upsert: OrderUpsertWithoutFinancesInput
}

input OrderUpdateOneRequiredWithoutOrderDetailsInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutOrderDetailsInput
  create: OrderCreateWithoutOrderDetailsInput
  update: OrderUpdateWithoutOrderDetailsInput
  upsert: OrderUpsertWithoutOrderDetailsInput
}

input OrderUpdateWithWhereUniqueWithoutClientInput {
  data: OrderUpdateWithoutClientInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithWhereUniqueWithoutEmployeeInput {
  data: OrderUpdateWithoutEmployeeInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithoutClientInput {
  Employee: EmployeeUpdateOneRequiredWithoutOrdersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  finances: FinanceUpdateManyWithoutOrderInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  orderDetails: OrderDetailUpdateManyWithoutOrderInput
  orderNumber: StringFieldUpdateOperationsInput
  orderTotal: IntFieldUpdateOperationsInput
  totalPaid: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateWithoutEmployeeInput {
  Client: ClientUpdateOneRequiredWithoutOrdersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  finances: FinanceUpdateManyWithoutOrderInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  orderDetails: OrderDetailUpdateManyWithoutOrderInput
  orderNumber: StringFieldUpdateOperationsInput
  orderTotal: IntFieldUpdateOperationsInput
  totalPaid: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateWithoutFinancesInput {
  Client: ClientUpdateOneRequiredWithoutOrdersInput
  Employee: EmployeeUpdateOneRequiredWithoutOrdersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  orderDetails: OrderDetailUpdateManyWithoutOrderInput
  orderNumber: StringFieldUpdateOperationsInput
  orderTotal: IntFieldUpdateOperationsInput
  totalPaid: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateWithoutOrderDetailsInput {
  Client: ClientUpdateOneRequiredWithoutOrdersInput
  Employee: EmployeeUpdateOneRequiredWithoutOrdersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  finances: FinanceUpdateManyWithoutOrderInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  orderNumber: StringFieldUpdateOperationsInput
  orderTotal: IntFieldUpdateOperationsInput
  totalPaid: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpsertWithWhereUniqueWithoutClientInput {
  create: OrderCreateWithoutClientInput!
  update: OrderUpdateWithoutClientInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithWhereUniqueWithoutEmployeeInput {
  create: OrderCreateWithoutEmployeeInput!
  update: OrderUpdateWithoutEmployeeInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithoutFinancesInput {
  create: OrderCreateWithoutFinancesInput!
  update: OrderUpdateWithoutFinancesInput!
}

input OrderUpsertWithoutOrderDetailsInput {
  create: OrderCreateWithoutOrderDetailsInput!
  update: OrderUpdateWithoutOrderDetailsInput!
}

input OrderWhereUniqueInput {
  id: String
}

type Product {
  Category: Category!
  carts(after: CartWhereUniqueInput, before: CartWhereUniqueInput, first: Int, last: Int): [Cart!]!
  categoryId: String!
  id: String!
  orderDetails(after: OrderDetailWhereUniqueInput, before: OrderDetailWhereUniqueInput, first: Int, last: Int): [OrderDetail!]!
  pdtCode: String!
  pdtName: String!
  unitPrice: Int!
}

input ProductCreateInput {
  Category: CategoryCreateNestedOneWithoutProductsInput!
  carts: CartCreateNestedManyWithoutProductInput
  createdAt: DateTime
  id: String
  orderDetails: OrderDetailCreateNestedManyWithoutProductInput
  pdtCode: String!
  pdtName: String!
  qttyInHand: Int!
  unitPrice: Int!
  updatedAt: DateTime
}

input ProductCreateManyCategoryInput {
  createdAt: DateTime
  id: String
  pdtCode: String!
  pdtName: String!
  qttyInHand: Int!
  unitPrice: Int!
  updatedAt: DateTime
}

input ProductCreateManyCategoryInputEnvelope {
  data: [ProductCreateManyCategoryInput!]
  skipDuplicates: Boolean
}

input ProductCreateNestedManyWithoutCategoryInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutCategoryInput!]
  create: [ProductCreateWithoutCategoryInput!]
  createMany: ProductCreateManyCategoryInputEnvelope
}

input ProductCreateNestedOneWithoutCartsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutCartsInput
  create: ProductCreateWithoutCartsInput
}

input ProductCreateNestedOneWithoutOrderDetailsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutOrderDetailsInput
  create: ProductCreateWithoutOrderDetailsInput
}

input ProductCreateOrConnectWithoutCartsInput {
  create: ProductCreateWithoutCartsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutCategoryInput {
  create: ProductCreateWithoutCategoryInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutOrderDetailsInput {
  create: ProductCreateWithoutOrderDetailsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutCartsInput {
  Category: CategoryCreateNestedOneWithoutProductsInput!
  createdAt: DateTime
  id: String
  orderDetails: OrderDetailCreateNestedManyWithoutProductInput
  pdtCode: String!
  pdtName: String!
  qttyInHand: Int!
  unitPrice: Int!
  updatedAt: DateTime
}

input ProductCreateWithoutCategoryInput {
  carts: CartCreateNestedManyWithoutProductInput
  createdAt: DateTime
  id: String
  orderDetails: OrderDetailCreateNestedManyWithoutProductInput
  pdtCode: String!
  pdtName: String!
  qttyInHand: Int!
  unitPrice: Int!
  updatedAt: DateTime
}

input ProductCreateWithoutOrderDetailsInput {
  Category: CategoryCreateNestedOneWithoutProductsInput!
  carts: CartCreateNestedManyWithoutProductInput
  createdAt: DateTime
  id: String
  pdtCode: String!
  pdtName: String!
  qttyInHand: Int!
  unitPrice: Int!
  updatedAt: DateTime
}

input ProductScalarWhereInput {
  AND: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  categoryId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  pdtCode: StringFilter
  pdtName: StringFilter
  qttyInHand: IntFilter
  unitPrice: IntFilter
  updatedAt: DateTimeFilter
}

input ProductUpdateInput {
  Category: CategoryUpdateOneRequiredWithoutProductsInput
  carts: CartUpdateManyWithoutProductInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDetails: OrderDetailUpdateManyWithoutProductInput
  pdtCode: StringFieldUpdateOperationsInput
  pdtName: StringFieldUpdateOperationsInput
  qttyInHand: IntFieldUpdateOperationsInput
  unitPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  pdtCode: StringFieldUpdateOperationsInput
  pdtName: StringFieldUpdateOperationsInput
  qttyInHand: IntFieldUpdateOperationsInput
  unitPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateManyWithWhereWithoutCategoryInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithoutCategoryInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutCategoryInput!]
  create: [ProductCreateWithoutCategoryInput!]
  createMany: ProductCreateManyCategoryInputEnvelope
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ProductUpdateOneRequiredWithoutCartsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutCartsInput
  create: ProductCreateWithoutCartsInput
  update: ProductUpdateWithoutCartsInput
  upsert: ProductUpsertWithoutCartsInput
}

input ProductUpdateOneRequiredWithoutOrderDetailsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutOrderDetailsInput
  create: ProductCreateWithoutOrderDetailsInput
  update: ProductUpdateWithoutOrderDetailsInput
  upsert: ProductUpsertWithoutOrderDetailsInput
}

input ProductUpdateWithWhereUniqueWithoutCategoryInput {
  data: ProductUpdateWithoutCategoryInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithoutCartsInput {
  Category: CategoryUpdateOneRequiredWithoutProductsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDetails: OrderDetailUpdateManyWithoutProductInput
  pdtCode: StringFieldUpdateOperationsInput
  pdtName: StringFieldUpdateOperationsInput
  qttyInHand: IntFieldUpdateOperationsInput
  unitPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateWithoutCategoryInput {
  carts: CartUpdateManyWithoutProductInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDetails: OrderDetailUpdateManyWithoutProductInput
  pdtCode: StringFieldUpdateOperationsInput
  pdtName: StringFieldUpdateOperationsInput
  qttyInHand: IntFieldUpdateOperationsInput
  unitPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateWithoutOrderDetailsInput {
  Category: CategoryUpdateOneRequiredWithoutProductsInput
  carts: CartUpdateManyWithoutProductInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  pdtCode: StringFieldUpdateOperationsInput
  pdtName: StringFieldUpdateOperationsInput
  qttyInHand: IntFieldUpdateOperationsInput
  unitPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpsertWithWhereUniqueWithoutCategoryInput {
  create: ProductCreateWithoutCategoryInput!
  update: ProductUpdateWithoutCategoryInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithoutCartsInput {
  create: ProductCreateWithoutCartsInput!
  update: ProductUpdateWithoutCartsInput!
}

input ProductUpsertWithoutOrderDetailsInput {
  create: ProductCreateWithoutOrderDetailsInput!
  update: ProductUpdateWithoutOrderDetailsInput!
}

input ProductWhereUniqueInput {
  id: String
}

type Query {
  cart(where: CartWhereUniqueInput!): Cart
  cartByClientIdAndEmplId(clientId: String, employeeId: String): [Cart]
  cartById(id: String): Cart
  carts(after: CartWhereUniqueInput, before: CartWhereUniqueInput, first: Int, last: Int): [Cart!]!
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  categoryById(id: String): Category
  client(where: ClientWhereUniqueInput!): Client
  clientById(id: String): [Client]
  clientByPhoneNumber(clientPhoneNumb: Int): Client
  clients: [Client]
  employee(where: EmployeeWhereUniqueInput!): Employee
  employeeByCode(employeeCode: String): Employee
  employeeById(id: String): Employee
  employeeByPhoneNumber(employeePhoneNumb: Int): Employee
  employeeStatus(where: EmployeeStatusWhereUniqueInput!): EmployeeStatus
  employeeStatusById(id: String): EmployeeStatus
  employeeStatuses(after: EmployeeStatusWhereUniqueInput, before: EmployeeStatusWhereUniqueInput, first: Int, last: Int): [EmployeeStatus!]!
  employees(after: EmployeeWhereUniqueInput, before: EmployeeWhereUniqueInput, first: Int, last: Int): [Employee!]!
  finance(where: FinanceWhereUniqueInput!): Finance
  financeById(id: String): Finance
  finances(after: FinanceWhereUniqueInput, before: FinanceWhereUniqueInput, first: Int, last: Int): [Finance!]!
  financialYear(where: FinancialYearWhereUniqueInput!): FinancialYear
  financialYearById(id: String): FinancialYear
  financialYears(id: String): FinancialYear
  order(where: OrderWhereUniqueInput!): Order
  orderById(id: String): Order
  orderDetail(where: OrderDetailWhereUniqueInput!): OrderDetail
  orderDetails(after: OrderDetailWhereUniqueInput, before: OrderDetailWhereUniqueInput, first: Int, last: Int): [OrderDetail!]!
  orderType(where: OrderTypeWhereUniqueInput!): OrderType
  orderTypeById(id: String): OrderType
  orderTypes(after: OrderTypeWhereUniqueInput, before: OrderTypeWhereUniqueInput, first: Int, last: Int): [OrderType!]!
  orders: [Order]
  product(where: ProductWhereUniqueInput!): Product
  productById(id: String): Product
  products: [Product]
  productsByCategoryID(categoryId: String): [Product]
  recentFinancialYear: FinancialYear
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}
