### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AnnualBranchEmployee {
  BranchEmployee: BranchEmployee
  FinancialYear: FinancialYear
  id: String!
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int): [Order!]!
}

input AnnualBranchEmployeeCreateInput {
  BranchEmployee: BranchEmployeeCreateNestedOneWithoutAnnBranchEmployeeInput
  FinancialYear: FinancialYearCreateNestedOneWithoutAnnBranchEmplsInput
  carts: CartCreateNestedManyWithoutAnnualBranchEmployeeInput
  createdAt: DateTime
  id: String
  orders: OrderCreateNestedManyWithoutAnnualBranchEmployeeInput
  updatedAt: DateTime
}

input AnnualBranchEmployeeCreateManyBranchEmployeeInput {
  createdAt: DateTime
  financialYearId: String
  id: String
  updatedAt: DateTime
}

input AnnualBranchEmployeeCreateManyBranchEmployeeInputEnvelope {
  data: [AnnualBranchEmployeeCreateManyBranchEmployeeInput!]
  skipDuplicates: Boolean
}

input AnnualBranchEmployeeCreateManyFinancialYearInput {
  branchEmployeeId: String
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input AnnualBranchEmployeeCreateManyFinancialYearInputEnvelope {
  data: [AnnualBranchEmployeeCreateManyFinancialYearInput!]
  skipDuplicates: Boolean
}

input AnnualBranchEmployeeCreateNestedManyWithoutBranchEmployeeInput {
  connect: [AnnualBranchEmployeeWhereUniqueInput!]
  connectOrCreate: [AnnualBranchEmployeeCreateOrConnectWithoutBranchEmployeeInput!]
  create: [AnnualBranchEmployeeCreateWithoutBranchEmployeeInput!]
  createMany: AnnualBranchEmployeeCreateManyBranchEmployeeInputEnvelope
}

input AnnualBranchEmployeeCreateNestedManyWithoutFinancialYearInput {
  connect: [AnnualBranchEmployeeWhereUniqueInput!]
  connectOrCreate: [AnnualBranchEmployeeCreateOrConnectWithoutFinancialYearInput!]
  create: [AnnualBranchEmployeeCreateWithoutFinancialYearInput!]
  createMany: AnnualBranchEmployeeCreateManyFinancialYearInputEnvelope
}

input AnnualBranchEmployeeCreateNestedOneWithoutCartsInput {
  connect: AnnualBranchEmployeeWhereUniqueInput
  connectOrCreate: AnnualBranchEmployeeCreateOrConnectWithoutCartsInput
  create: AnnualBranchEmployeeCreateWithoutCartsInput
}

input AnnualBranchEmployeeCreateNestedOneWithoutOrdersInput {
  connect: AnnualBranchEmployeeWhereUniqueInput
  connectOrCreate: AnnualBranchEmployeeCreateOrConnectWithoutOrdersInput
  create: AnnualBranchEmployeeCreateWithoutOrdersInput
}

input AnnualBranchEmployeeCreateOrConnectWithoutBranchEmployeeInput {
  create: AnnualBranchEmployeeCreateWithoutBranchEmployeeInput!
  where: AnnualBranchEmployeeWhereUniqueInput!
}

input AnnualBranchEmployeeCreateOrConnectWithoutCartsInput {
  create: AnnualBranchEmployeeCreateWithoutCartsInput!
  where: AnnualBranchEmployeeWhereUniqueInput!
}

input AnnualBranchEmployeeCreateOrConnectWithoutFinancialYearInput {
  create: AnnualBranchEmployeeCreateWithoutFinancialYearInput!
  where: AnnualBranchEmployeeWhereUniqueInput!
}

input AnnualBranchEmployeeCreateOrConnectWithoutOrdersInput {
  create: AnnualBranchEmployeeCreateWithoutOrdersInput!
  where: AnnualBranchEmployeeWhereUniqueInput!
}

input AnnualBranchEmployeeCreateWithoutBranchEmployeeInput {
  FinancialYear: FinancialYearCreateNestedOneWithoutAnnBranchEmplsInput
  carts: CartCreateNestedManyWithoutAnnualBranchEmployeeInput
  createdAt: DateTime
  id: String
  orders: OrderCreateNestedManyWithoutAnnualBranchEmployeeInput
  updatedAt: DateTime
}

input AnnualBranchEmployeeCreateWithoutCartsInput {
  BranchEmployee: BranchEmployeeCreateNestedOneWithoutAnnBranchEmployeeInput
  FinancialYear: FinancialYearCreateNestedOneWithoutAnnBranchEmplsInput
  createdAt: DateTime
  id: String
  orders: OrderCreateNestedManyWithoutAnnualBranchEmployeeInput
  updatedAt: DateTime
}

input AnnualBranchEmployeeCreateWithoutFinancialYearInput {
  BranchEmployee: BranchEmployeeCreateNestedOneWithoutAnnBranchEmployeeInput
  carts: CartCreateNestedManyWithoutAnnualBranchEmployeeInput
  createdAt: DateTime
  id: String
  orders: OrderCreateNestedManyWithoutAnnualBranchEmployeeInput
  updatedAt: DateTime
}

input AnnualBranchEmployeeCreateWithoutOrdersInput {
  BranchEmployee: BranchEmployeeCreateNestedOneWithoutAnnBranchEmployeeInput
  FinancialYear: FinancialYearCreateNestedOneWithoutAnnBranchEmplsInput
  carts: CartCreateNestedManyWithoutAnnualBranchEmployeeInput
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input AnnualBranchEmployeeScalarWhereInput {
  AND: [AnnualBranchEmployeeScalarWhereInput!]
  NOT: [AnnualBranchEmployeeScalarWhereInput!]
  OR: [AnnualBranchEmployeeScalarWhereInput!]
  branchEmployeeId: StringNullableFilter
  createdAt: DateTimeFilter
  financialYearId: StringNullableFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input AnnualBranchEmployeeUpdateInput {
  BranchEmployee: BranchEmployeeUpdateOneWithoutAnnBranchEmployeeInput
  FinancialYear: FinancialYearUpdateOneWithoutAnnBranchEmplsInput
  carts: CartUpdateManyWithoutAnnualBranchEmployeeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutAnnualBranchEmployeeInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnualBranchEmployeeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnualBranchEmployeeUpdateManyWithWhereWithoutBranchEmployeeInput {
  data: AnnualBranchEmployeeUpdateManyMutationInput!
  where: AnnualBranchEmployeeScalarWhereInput!
}

input AnnualBranchEmployeeUpdateManyWithWhereWithoutFinancialYearInput {
  data: AnnualBranchEmployeeUpdateManyMutationInput!
  where: AnnualBranchEmployeeScalarWhereInput!
}

input AnnualBranchEmployeeUpdateManyWithoutBranchEmployeeInput {
  connect: [AnnualBranchEmployeeWhereUniqueInput!]
  connectOrCreate: [AnnualBranchEmployeeCreateOrConnectWithoutBranchEmployeeInput!]
  create: [AnnualBranchEmployeeCreateWithoutBranchEmployeeInput!]
  createMany: AnnualBranchEmployeeCreateManyBranchEmployeeInputEnvelope
  delete: [AnnualBranchEmployeeWhereUniqueInput!]
  deleteMany: [AnnualBranchEmployeeScalarWhereInput!]
  disconnect: [AnnualBranchEmployeeWhereUniqueInput!]
  set: [AnnualBranchEmployeeWhereUniqueInput!]
  update: [AnnualBranchEmployeeUpdateWithWhereUniqueWithoutBranchEmployeeInput!]
  updateMany: [AnnualBranchEmployeeUpdateManyWithWhereWithoutBranchEmployeeInput!]
  upsert: [AnnualBranchEmployeeUpsertWithWhereUniqueWithoutBranchEmployeeInput!]
}

input AnnualBranchEmployeeUpdateManyWithoutFinancialYearInput {
  connect: [AnnualBranchEmployeeWhereUniqueInput!]
  connectOrCreate: [AnnualBranchEmployeeCreateOrConnectWithoutFinancialYearInput!]
  create: [AnnualBranchEmployeeCreateWithoutFinancialYearInput!]
  createMany: AnnualBranchEmployeeCreateManyFinancialYearInputEnvelope
  delete: [AnnualBranchEmployeeWhereUniqueInput!]
  deleteMany: [AnnualBranchEmployeeScalarWhereInput!]
  disconnect: [AnnualBranchEmployeeWhereUniqueInput!]
  set: [AnnualBranchEmployeeWhereUniqueInput!]
  update: [AnnualBranchEmployeeUpdateWithWhereUniqueWithoutFinancialYearInput!]
  updateMany: [AnnualBranchEmployeeUpdateManyWithWhereWithoutFinancialYearInput!]
  upsert: [AnnualBranchEmployeeUpsertWithWhereUniqueWithoutFinancialYearInput!]
}

input AnnualBranchEmployeeUpdateOneWithoutCartsInput {
  connect: AnnualBranchEmployeeWhereUniqueInput
  connectOrCreate: AnnualBranchEmployeeCreateOrConnectWithoutCartsInput
  create: AnnualBranchEmployeeCreateWithoutCartsInput
  delete: Boolean
  disconnect: Boolean
  update: AnnualBranchEmployeeUpdateWithoutCartsInput
  upsert: AnnualBranchEmployeeUpsertWithoutCartsInput
}

input AnnualBranchEmployeeUpdateOneWithoutOrdersInput {
  connect: AnnualBranchEmployeeWhereUniqueInput
  connectOrCreate: AnnualBranchEmployeeCreateOrConnectWithoutOrdersInput
  create: AnnualBranchEmployeeCreateWithoutOrdersInput
  delete: Boolean
  disconnect: Boolean
  update: AnnualBranchEmployeeUpdateWithoutOrdersInput
  upsert: AnnualBranchEmployeeUpsertWithoutOrdersInput
}

input AnnualBranchEmployeeUpdateWithWhereUniqueWithoutBranchEmployeeInput {
  data: AnnualBranchEmployeeUpdateWithoutBranchEmployeeInput!
  where: AnnualBranchEmployeeWhereUniqueInput!
}

input AnnualBranchEmployeeUpdateWithWhereUniqueWithoutFinancialYearInput {
  data: AnnualBranchEmployeeUpdateWithoutFinancialYearInput!
  where: AnnualBranchEmployeeWhereUniqueInput!
}

input AnnualBranchEmployeeUpdateWithoutBranchEmployeeInput {
  FinancialYear: FinancialYearUpdateOneWithoutAnnBranchEmplsInput
  carts: CartUpdateManyWithoutAnnualBranchEmployeeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutAnnualBranchEmployeeInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnualBranchEmployeeUpdateWithoutCartsInput {
  BranchEmployee: BranchEmployeeUpdateOneWithoutAnnBranchEmployeeInput
  FinancialYear: FinancialYearUpdateOneWithoutAnnBranchEmplsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutAnnualBranchEmployeeInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnualBranchEmployeeUpdateWithoutFinancialYearInput {
  BranchEmployee: BranchEmployeeUpdateOneWithoutAnnBranchEmployeeInput
  carts: CartUpdateManyWithoutAnnualBranchEmployeeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutAnnualBranchEmployeeInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnualBranchEmployeeUpdateWithoutOrdersInput {
  BranchEmployee: BranchEmployeeUpdateOneWithoutAnnBranchEmployeeInput
  FinancialYear: FinancialYearUpdateOneWithoutAnnBranchEmplsInput
  carts: CartUpdateManyWithoutAnnualBranchEmployeeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnualBranchEmployeeUpsertWithWhereUniqueWithoutBranchEmployeeInput {
  create: AnnualBranchEmployeeCreateWithoutBranchEmployeeInput!
  update: AnnualBranchEmployeeUpdateWithoutBranchEmployeeInput!
  where: AnnualBranchEmployeeWhereUniqueInput!
}

input AnnualBranchEmployeeUpsertWithWhereUniqueWithoutFinancialYearInput {
  create: AnnualBranchEmployeeCreateWithoutFinancialYearInput!
  update: AnnualBranchEmployeeUpdateWithoutFinancialYearInput!
  where: AnnualBranchEmployeeWhereUniqueInput!
}

input AnnualBranchEmployeeUpsertWithoutCartsInput {
  create: AnnualBranchEmployeeCreateWithoutCartsInput!
  update: AnnualBranchEmployeeUpdateWithoutCartsInput!
}

input AnnualBranchEmployeeUpsertWithoutOrdersInput {
  create: AnnualBranchEmployeeCreateWithoutOrdersInput!
  update: AnnualBranchEmployeeUpdateWithoutOrdersInput!
}

input AnnualBranchEmployeeWhereUniqueInput {
  id: String
}

type AnnualClient {
  Client: Client
  FinancialYear: FinancialYear
  carts(after: CartWhereUniqueInput, before: CartWhereUniqueInput, first: Int, last: Int): [Cart!]!
  clientId: String
  financialYearId: String
  id: String!
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int): [Order!]!
}

input AnnualClientCreateInput {
  Client: ClientCreateNestedOneWithoutAnnClientsInput
  FinancialYear: FinancialYearCreateNestedOneWithoutAnnClientsInput
  carts: CartCreateNestedManyWithoutAnnualClientInput
  createdAt: DateTime
  id: String
  orders: OrderCreateNestedManyWithoutAnnualClientInput
  updatedAt: DateTime
}

input AnnualClientCreateManyClientInput {
  createdAt: DateTime
  financialYearId: String
  id: String
  updatedAt: DateTime
}

input AnnualClientCreateManyClientInputEnvelope {
  data: [AnnualClientCreateManyClientInput!]
  skipDuplicates: Boolean
}

input AnnualClientCreateManyFinancialYearInput {
  clientId: String
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input AnnualClientCreateManyFinancialYearInputEnvelope {
  data: [AnnualClientCreateManyFinancialYearInput!]
  skipDuplicates: Boolean
}

input AnnualClientCreateNestedManyWithoutClientInput {
  connect: [AnnualClientWhereUniqueInput!]
  connectOrCreate: [AnnualClientCreateOrConnectWithoutClientInput!]
  create: [AnnualClientCreateWithoutClientInput!]
  createMany: AnnualClientCreateManyClientInputEnvelope
}

input AnnualClientCreateNestedManyWithoutFinancialYearInput {
  connect: [AnnualClientWhereUniqueInput!]
  connectOrCreate: [AnnualClientCreateOrConnectWithoutFinancialYearInput!]
  create: [AnnualClientCreateWithoutFinancialYearInput!]
  createMany: AnnualClientCreateManyFinancialYearInputEnvelope
}

input AnnualClientCreateNestedOneWithoutCartsInput {
  connect: AnnualClientWhereUniqueInput
  connectOrCreate: AnnualClientCreateOrConnectWithoutCartsInput
  create: AnnualClientCreateWithoutCartsInput
}

input AnnualClientCreateNestedOneWithoutOrdersInput {
  connect: AnnualClientWhereUniqueInput
  connectOrCreate: AnnualClientCreateOrConnectWithoutOrdersInput
  create: AnnualClientCreateWithoutOrdersInput
}

input AnnualClientCreateOrConnectWithoutCartsInput {
  create: AnnualClientCreateWithoutCartsInput!
  where: AnnualClientWhereUniqueInput!
}

input AnnualClientCreateOrConnectWithoutClientInput {
  create: AnnualClientCreateWithoutClientInput!
  where: AnnualClientWhereUniqueInput!
}

input AnnualClientCreateOrConnectWithoutFinancialYearInput {
  create: AnnualClientCreateWithoutFinancialYearInput!
  where: AnnualClientWhereUniqueInput!
}

input AnnualClientCreateOrConnectWithoutOrdersInput {
  create: AnnualClientCreateWithoutOrdersInput!
  where: AnnualClientWhereUniqueInput!
}

input AnnualClientCreateWithoutCartsInput {
  Client: ClientCreateNestedOneWithoutAnnClientsInput
  FinancialYear: FinancialYearCreateNestedOneWithoutAnnClientsInput
  createdAt: DateTime
  id: String
  orders: OrderCreateNestedManyWithoutAnnualClientInput
  updatedAt: DateTime
}

input AnnualClientCreateWithoutClientInput {
  FinancialYear: FinancialYearCreateNestedOneWithoutAnnClientsInput
  carts: CartCreateNestedManyWithoutAnnualClientInput
  createdAt: DateTime
  id: String
  orders: OrderCreateNestedManyWithoutAnnualClientInput
  updatedAt: DateTime
}

input AnnualClientCreateWithoutFinancialYearInput {
  Client: ClientCreateNestedOneWithoutAnnClientsInput
  carts: CartCreateNestedManyWithoutAnnualClientInput
  createdAt: DateTime
  id: String
  orders: OrderCreateNestedManyWithoutAnnualClientInput
  updatedAt: DateTime
}

input AnnualClientCreateWithoutOrdersInput {
  Client: ClientCreateNestedOneWithoutAnnClientsInput
  FinancialYear: FinancialYearCreateNestedOneWithoutAnnClientsInput
  carts: CartCreateNestedManyWithoutAnnualClientInput
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input AnnualClientScalarWhereInput {
  AND: [AnnualClientScalarWhereInput!]
  NOT: [AnnualClientScalarWhereInput!]
  OR: [AnnualClientScalarWhereInput!]
  clientId: StringNullableFilter
  createdAt: DateTimeFilter
  financialYearId: StringNullableFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input AnnualClientUpdateInput {
  Client: ClientUpdateOneWithoutAnnClientsInput
  FinancialYear: FinancialYearUpdateOneWithoutAnnClientsInput
  carts: CartUpdateManyWithoutAnnualClientInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutAnnualClientInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnualClientUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnualClientUpdateManyWithWhereWithoutClientInput {
  data: AnnualClientUpdateManyMutationInput!
  where: AnnualClientScalarWhereInput!
}

input AnnualClientUpdateManyWithWhereWithoutFinancialYearInput {
  data: AnnualClientUpdateManyMutationInput!
  where: AnnualClientScalarWhereInput!
}

input AnnualClientUpdateManyWithoutClientInput {
  connect: [AnnualClientWhereUniqueInput!]
  connectOrCreate: [AnnualClientCreateOrConnectWithoutClientInput!]
  create: [AnnualClientCreateWithoutClientInput!]
  createMany: AnnualClientCreateManyClientInputEnvelope
  delete: [AnnualClientWhereUniqueInput!]
  deleteMany: [AnnualClientScalarWhereInput!]
  disconnect: [AnnualClientWhereUniqueInput!]
  set: [AnnualClientWhereUniqueInput!]
  update: [AnnualClientUpdateWithWhereUniqueWithoutClientInput!]
  updateMany: [AnnualClientUpdateManyWithWhereWithoutClientInput!]
  upsert: [AnnualClientUpsertWithWhereUniqueWithoutClientInput!]
}

input AnnualClientUpdateManyWithoutFinancialYearInput {
  connect: [AnnualClientWhereUniqueInput!]
  connectOrCreate: [AnnualClientCreateOrConnectWithoutFinancialYearInput!]
  create: [AnnualClientCreateWithoutFinancialYearInput!]
  createMany: AnnualClientCreateManyFinancialYearInputEnvelope
  delete: [AnnualClientWhereUniqueInput!]
  deleteMany: [AnnualClientScalarWhereInput!]
  disconnect: [AnnualClientWhereUniqueInput!]
  set: [AnnualClientWhereUniqueInput!]
  update: [AnnualClientUpdateWithWhereUniqueWithoutFinancialYearInput!]
  updateMany: [AnnualClientUpdateManyWithWhereWithoutFinancialYearInput!]
  upsert: [AnnualClientUpsertWithWhereUniqueWithoutFinancialYearInput!]
}

input AnnualClientUpdateOneWithoutCartsInput {
  connect: AnnualClientWhereUniqueInput
  connectOrCreate: AnnualClientCreateOrConnectWithoutCartsInput
  create: AnnualClientCreateWithoutCartsInput
  delete: Boolean
  disconnect: Boolean
  update: AnnualClientUpdateWithoutCartsInput
  upsert: AnnualClientUpsertWithoutCartsInput
}

input AnnualClientUpdateOneWithoutOrdersInput {
  connect: AnnualClientWhereUniqueInput
  connectOrCreate: AnnualClientCreateOrConnectWithoutOrdersInput
  create: AnnualClientCreateWithoutOrdersInput
  delete: Boolean
  disconnect: Boolean
  update: AnnualClientUpdateWithoutOrdersInput
  upsert: AnnualClientUpsertWithoutOrdersInput
}

input AnnualClientUpdateWithWhereUniqueWithoutClientInput {
  data: AnnualClientUpdateWithoutClientInput!
  where: AnnualClientWhereUniqueInput!
}

input AnnualClientUpdateWithWhereUniqueWithoutFinancialYearInput {
  data: AnnualClientUpdateWithoutFinancialYearInput!
  where: AnnualClientWhereUniqueInput!
}

input AnnualClientUpdateWithoutCartsInput {
  Client: ClientUpdateOneWithoutAnnClientsInput
  FinancialYear: FinancialYearUpdateOneWithoutAnnClientsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutAnnualClientInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnualClientUpdateWithoutClientInput {
  FinancialYear: FinancialYearUpdateOneWithoutAnnClientsInput
  carts: CartUpdateManyWithoutAnnualClientInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutAnnualClientInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnualClientUpdateWithoutFinancialYearInput {
  Client: ClientUpdateOneWithoutAnnClientsInput
  carts: CartUpdateManyWithoutAnnualClientInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutAnnualClientInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnualClientUpdateWithoutOrdersInput {
  Client: ClientUpdateOneWithoutAnnClientsInput
  FinancialYear: FinancialYearUpdateOneWithoutAnnClientsInput
  carts: CartUpdateManyWithoutAnnualClientInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnualClientUpsertWithWhereUniqueWithoutClientInput {
  create: AnnualClientCreateWithoutClientInput!
  update: AnnualClientUpdateWithoutClientInput!
  where: AnnualClientWhereUniqueInput!
}

input AnnualClientUpsertWithWhereUniqueWithoutFinancialYearInput {
  create: AnnualClientCreateWithoutFinancialYearInput!
  update: AnnualClientUpdateWithoutFinancialYearInput!
  where: AnnualClientWhereUniqueInput!
}

input AnnualClientUpsertWithoutCartsInput {
  create: AnnualClientCreateWithoutCartsInput!
  update: AnnualClientUpdateWithoutCartsInput!
}

input AnnualClientUpsertWithoutOrdersInput {
  create: AnnualClientCreateWithoutOrdersInput!
  update: AnnualClientUpdateWithoutOrdersInput!
}

input AnnualClientWhereUniqueInput {
  id: String
}

type Bonus {
  bonusName: String!
  id: String!
}

input BonusCreateInput {
  bonusName: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input BonusUpdateInput {
  bonusName: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BonusWhereUniqueInput {
  id: String
}

type Branch {
  branchCode: String!
  branchEmpls(after: BranchEmployeeWhereUniqueInput, before: BranchEmployeeWhereUniqueInput, first: Int, last: Int): [BranchEmployee!]!
  branchName: String!
  id: String!
}

input BranchCreateInput {
  branchCode: String!
  branchEmpls: BranchEmployeeCreateNestedManyWithoutBranchInput
  branchName: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input BranchCreateNestedOneWithoutBranchEmplsInput {
  connect: BranchWhereUniqueInput
  connectOrCreate: BranchCreateOrConnectWithoutBranchEmplsInput
  create: BranchCreateWithoutBranchEmplsInput
}

input BranchCreateOrConnectWithoutBranchEmplsInput {
  create: BranchCreateWithoutBranchEmplsInput!
  where: BranchWhereUniqueInput!
}

input BranchCreateWithoutBranchEmplsInput {
  branchCode: String!
  branchName: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

type BranchEmployee {
  Branch: Branch!
  Employee: Employee!
  EmployeeStatus: EmployeeStatus!
  endDate: DateTime!
  id: String!
  startDate: DateTime!
}

input BranchEmployeeCreateInput {
  Branch: BranchCreateNestedOneWithoutBranchEmplsInput!
  Employee: EmployeeCreateNestedOneWithoutBranchEmplsInput!
  EmployeeStatus: EmployeeStatusCreateNestedOneWithoutBranchEmplsInput!
  annBranchEmployee: AnnualBranchEmployeeCreateNestedManyWithoutBranchEmployeeInput
  createdAt: DateTime
  endDate: DateTime
  id: String
  startDate: DateTime
  updatedAt: DateTime
}

input BranchEmployeeCreateManyBranchInput {
  createdAt: DateTime
  employeeId: String!
  employeeStatusId: String!
  endDate: DateTime
  id: String
  startDate: DateTime
  updatedAt: DateTime
}

input BranchEmployeeCreateManyBranchInputEnvelope {
  data: [BranchEmployeeCreateManyBranchInput!]
  skipDuplicates: Boolean
}

input BranchEmployeeCreateManyEmployeeInput {
  branchId: String!
  createdAt: DateTime
  employeeStatusId: String!
  endDate: DateTime
  id: String
  startDate: DateTime
  updatedAt: DateTime
}

input BranchEmployeeCreateManyEmployeeInputEnvelope {
  data: [BranchEmployeeCreateManyEmployeeInput!]
  skipDuplicates: Boolean
}

input BranchEmployeeCreateManyEmployeeStatusInput {
  branchId: String!
  createdAt: DateTime
  employeeId: String!
  endDate: DateTime
  id: String
  startDate: DateTime
  updatedAt: DateTime
}

input BranchEmployeeCreateManyEmployeeStatusInputEnvelope {
  data: [BranchEmployeeCreateManyEmployeeStatusInput!]
  skipDuplicates: Boolean
}

input BranchEmployeeCreateNestedManyWithoutBranchInput {
  connect: [BranchEmployeeWhereUniqueInput!]
  connectOrCreate: [BranchEmployeeCreateOrConnectWithoutBranchInput!]
  create: [BranchEmployeeCreateWithoutBranchInput!]
  createMany: BranchEmployeeCreateManyBranchInputEnvelope
}

input BranchEmployeeCreateNestedManyWithoutEmployeeInput {
  connect: [BranchEmployeeWhereUniqueInput!]
  connectOrCreate: [BranchEmployeeCreateOrConnectWithoutEmployeeInput!]
  create: [BranchEmployeeCreateWithoutEmployeeInput!]
  createMany: BranchEmployeeCreateManyEmployeeInputEnvelope
}

input BranchEmployeeCreateNestedManyWithoutEmployeeStatusInput {
  connect: [BranchEmployeeWhereUniqueInput!]
  connectOrCreate: [BranchEmployeeCreateOrConnectWithoutEmployeeStatusInput!]
  create: [BranchEmployeeCreateWithoutEmployeeStatusInput!]
  createMany: BranchEmployeeCreateManyEmployeeStatusInputEnvelope
}

input BranchEmployeeCreateNestedOneWithoutAnnBranchEmployeeInput {
  connect: BranchEmployeeWhereUniqueInput
  connectOrCreate: BranchEmployeeCreateOrConnectWithoutAnnBranchEmployeeInput
  create: BranchEmployeeCreateWithoutAnnBranchEmployeeInput
}

input BranchEmployeeCreateOrConnectWithoutAnnBranchEmployeeInput {
  create: BranchEmployeeCreateWithoutAnnBranchEmployeeInput!
  where: BranchEmployeeWhereUniqueInput!
}

input BranchEmployeeCreateOrConnectWithoutBranchInput {
  create: BranchEmployeeCreateWithoutBranchInput!
  where: BranchEmployeeWhereUniqueInput!
}

input BranchEmployeeCreateOrConnectWithoutEmployeeInput {
  create: BranchEmployeeCreateWithoutEmployeeInput!
  where: BranchEmployeeWhereUniqueInput!
}

input BranchEmployeeCreateOrConnectWithoutEmployeeStatusInput {
  create: BranchEmployeeCreateWithoutEmployeeStatusInput!
  where: BranchEmployeeWhereUniqueInput!
}

input BranchEmployeeCreateWithoutAnnBranchEmployeeInput {
  Branch: BranchCreateNestedOneWithoutBranchEmplsInput!
  Employee: EmployeeCreateNestedOneWithoutBranchEmplsInput!
  EmployeeStatus: EmployeeStatusCreateNestedOneWithoutBranchEmplsInput!
  createdAt: DateTime
  endDate: DateTime
  id: String
  startDate: DateTime
  updatedAt: DateTime
}

input BranchEmployeeCreateWithoutBranchInput {
  Employee: EmployeeCreateNestedOneWithoutBranchEmplsInput!
  EmployeeStatus: EmployeeStatusCreateNestedOneWithoutBranchEmplsInput!
  annBranchEmployee: AnnualBranchEmployeeCreateNestedManyWithoutBranchEmployeeInput
  createdAt: DateTime
  endDate: DateTime
  id: String
  startDate: DateTime
  updatedAt: DateTime
}

input BranchEmployeeCreateWithoutEmployeeInput {
  Branch: BranchCreateNestedOneWithoutBranchEmplsInput!
  EmployeeStatus: EmployeeStatusCreateNestedOneWithoutBranchEmplsInput!
  annBranchEmployee: AnnualBranchEmployeeCreateNestedManyWithoutBranchEmployeeInput
  createdAt: DateTime
  endDate: DateTime
  id: String
  startDate: DateTime
  updatedAt: DateTime
}

input BranchEmployeeCreateWithoutEmployeeStatusInput {
  Branch: BranchCreateNestedOneWithoutBranchEmplsInput!
  Employee: EmployeeCreateNestedOneWithoutBranchEmplsInput!
  annBranchEmployee: AnnualBranchEmployeeCreateNestedManyWithoutBranchEmployeeInput
  createdAt: DateTime
  endDate: DateTime
  id: String
  startDate: DateTime
  updatedAt: DateTime
}

input BranchEmployeeScalarWhereInput {
  AND: [BranchEmployeeScalarWhereInput!]
  NOT: [BranchEmployeeScalarWhereInput!]
  OR: [BranchEmployeeScalarWhereInput!]
  branchId: StringFilter
  createdAt: DateTimeFilter
  employeeId: StringFilter
  employeeStatusId: StringFilter
  endDate: DateTimeFilter
  id: StringFilter
  startDate: DateTimeFilter
  updatedAt: DateTimeFilter
}

input BranchEmployeeUpdateInput {
  Branch: BranchUpdateOneRequiredWithoutBranchEmplsInput
  Employee: EmployeeUpdateOneRequiredWithoutBranchEmplsInput
  EmployeeStatus: EmployeeStatusUpdateOneRequiredWithoutBranchEmplsInput
  annBranchEmployee: AnnualBranchEmployeeUpdateManyWithoutBranchEmployeeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BranchEmployeeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BranchEmployeeUpdateManyWithWhereWithoutBranchInput {
  data: BranchEmployeeUpdateManyMutationInput!
  where: BranchEmployeeScalarWhereInput!
}

input BranchEmployeeUpdateManyWithWhereWithoutEmployeeInput {
  data: BranchEmployeeUpdateManyMutationInput!
  where: BranchEmployeeScalarWhereInput!
}

input BranchEmployeeUpdateManyWithWhereWithoutEmployeeStatusInput {
  data: BranchEmployeeUpdateManyMutationInput!
  where: BranchEmployeeScalarWhereInput!
}

input BranchEmployeeUpdateManyWithoutBranchInput {
  connect: [BranchEmployeeWhereUniqueInput!]
  connectOrCreate: [BranchEmployeeCreateOrConnectWithoutBranchInput!]
  create: [BranchEmployeeCreateWithoutBranchInput!]
  createMany: BranchEmployeeCreateManyBranchInputEnvelope
  delete: [BranchEmployeeWhereUniqueInput!]
  deleteMany: [BranchEmployeeScalarWhereInput!]
  disconnect: [BranchEmployeeWhereUniqueInput!]
  set: [BranchEmployeeWhereUniqueInput!]
  update: [BranchEmployeeUpdateWithWhereUniqueWithoutBranchInput!]
  updateMany: [BranchEmployeeUpdateManyWithWhereWithoutBranchInput!]
  upsert: [BranchEmployeeUpsertWithWhereUniqueWithoutBranchInput!]
}

input BranchEmployeeUpdateManyWithoutEmployeeInput {
  connect: [BranchEmployeeWhereUniqueInput!]
  connectOrCreate: [BranchEmployeeCreateOrConnectWithoutEmployeeInput!]
  create: [BranchEmployeeCreateWithoutEmployeeInput!]
  createMany: BranchEmployeeCreateManyEmployeeInputEnvelope
  delete: [BranchEmployeeWhereUniqueInput!]
  deleteMany: [BranchEmployeeScalarWhereInput!]
  disconnect: [BranchEmployeeWhereUniqueInput!]
  set: [BranchEmployeeWhereUniqueInput!]
  update: [BranchEmployeeUpdateWithWhereUniqueWithoutEmployeeInput!]
  updateMany: [BranchEmployeeUpdateManyWithWhereWithoutEmployeeInput!]
  upsert: [BranchEmployeeUpsertWithWhereUniqueWithoutEmployeeInput!]
}

input BranchEmployeeUpdateManyWithoutEmployeeStatusInput {
  connect: [BranchEmployeeWhereUniqueInput!]
  connectOrCreate: [BranchEmployeeCreateOrConnectWithoutEmployeeStatusInput!]
  create: [BranchEmployeeCreateWithoutEmployeeStatusInput!]
  createMany: BranchEmployeeCreateManyEmployeeStatusInputEnvelope
  delete: [BranchEmployeeWhereUniqueInput!]
  deleteMany: [BranchEmployeeScalarWhereInput!]
  disconnect: [BranchEmployeeWhereUniqueInput!]
  set: [BranchEmployeeWhereUniqueInput!]
  update: [BranchEmployeeUpdateWithWhereUniqueWithoutEmployeeStatusInput!]
  updateMany: [BranchEmployeeUpdateManyWithWhereWithoutEmployeeStatusInput!]
  upsert: [BranchEmployeeUpsertWithWhereUniqueWithoutEmployeeStatusInput!]
}

input BranchEmployeeUpdateOneWithoutAnnBranchEmployeeInput {
  connect: BranchEmployeeWhereUniqueInput
  connectOrCreate: BranchEmployeeCreateOrConnectWithoutAnnBranchEmployeeInput
  create: BranchEmployeeCreateWithoutAnnBranchEmployeeInput
  delete: Boolean
  disconnect: Boolean
  update: BranchEmployeeUpdateWithoutAnnBranchEmployeeInput
  upsert: BranchEmployeeUpsertWithoutAnnBranchEmployeeInput
}

input BranchEmployeeUpdateWithWhereUniqueWithoutBranchInput {
  data: BranchEmployeeUpdateWithoutBranchInput!
  where: BranchEmployeeWhereUniqueInput!
}

input BranchEmployeeUpdateWithWhereUniqueWithoutEmployeeInput {
  data: BranchEmployeeUpdateWithoutEmployeeInput!
  where: BranchEmployeeWhereUniqueInput!
}

input BranchEmployeeUpdateWithWhereUniqueWithoutEmployeeStatusInput {
  data: BranchEmployeeUpdateWithoutEmployeeStatusInput!
  where: BranchEmployeeWhereUniqueInput!
}

input BranchEmployeeUpdateWithoutAnnBranchEmployeeInput {
  Branch: BranchUpdateOneRequiredWithoutBranchEmplsInput
  Employee: EmployeeUpdateOneRequiredWithoutBranchEmplsInput
  EmployeeStatus: EmployeeStatusUpdateOneRequiredWithoutBranchEmplsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BranchEmployeeUpdateWithoutBranchInput {
  Employee: EmployeeUpdateOneRequiredWithoutBranchEmplsInput
  EmployeeStatus: EmployeeStatusUpdateOneRequiredWithoutBranchEmplsInput
  annBranchEmployee: AnnualBranchEmployeeUpdateManyWithoutBranchEmployeeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BranchEmployeeUpdateWithoutEmployeeInput {
  Branch: BranchUpdateOneRequiredWithoutBranchEmplsInput
  EmployeeStatus: EmployeeStatusUpdateOneRequiredWithoutBranchEmplsInput
  annBranchEmployee: AnnualBranchEmployeeUpdateManyWithoutBranchEmployeeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BranchEmployeeUpdateWithoutEmployeeStatusInput {
  Branch: BranchUpdateOneRequiredWithoutBranchEmplsInput
  Employee: EmployeeUpdateOneRequiredWithoutBranchEmplsInput
  annBranchEmployee: AnnualBranchEmployeeUpdateManyWithoutBranchEmployeeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BranchEmployeeUpsertWithWhereUniqueWithoutBranchInput {
  create: BranchEmployeeCreateWithoutBranchInput!
  update: BranchEmployeeUpdateWithoutBranchInput!
  where: BranchEmployeeWhereUniqueInput!
}

input BranchEmployeeUpsertWithWhereUniqueWithoutEmployeeInput {
  create: BranchEmployeeCreateWithoutEmployeeInput!
  update: BranchEmployeeUpdateWithoutEmployeeInput!
  where: BranchEmployeeWhereUniqueInput!
}

input BranchEmployeeUpsertWithWhereUniqueWithoutEmployeeStatusInput {
  create: BranchEmployeeCreateWithoutEmployeeStatusInput!
  update: BranchEmployeeUpdateWithoutEmployeeStatusInput!
  where: BranchEmployeeWhereUniqueInput!
}

input BranchEmployeeUpsertWithoutAnnBranchEmployeeInput {
  create: BranchEmployeeCreateWithoutAnnBranchEmployeeInput!
  update: BranchEmployeeUpdateWithoutAnnBranchEmployeeInput!
}

input BranchEmployeeWhereUniqueInput {
  id: String
}

input BranchUpdateInput {
  branchCode: StringFieldUpdateOperationsInput
  branchEmpls: BranchEmployeeUpdateManyWithoutBranchInput
  branchName: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BranchUpdateOneRequiredWithoutBranchEmplsInput {
  connect: BranchWhereUniqueInput
  connectOrCreate: BranchCreateOrConnectWithoutBranchEmplsInput
  create: BranchCreateWithoutBranchEmplsInput
  update: BranchUpdateWithoutBranchEmplsInput
  upsert: BranchUpsertWithoutBranchEmplsInput
}

input BranchUpdateWithoutBranchEmplsInput {
  branchCode: StringFieldUpdateOperationsInput
  branchName: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BranchUpsertWithoutBranchEmplsInput {
  create: BranchCreateWithoutBranchEmplsInput!
  update: BranchUpdateWithoutBranchEmplsInput!
}

input BranchWhereUniqueInput {
  branchCode: String
  id: String
}

type Cart {
  AnnualBranchEmployee: AnnualBranchEmployee
  AnnualClient: AnnualClient
  Product: Product!
  annualBranchEmployeeId: String
  id: String!
  orderDate: DateTime!
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
}

input CartCreateInput {
  AnnualBranchEmployee: AnnualBranchEmployeeCreateNestedOneWithoutCartsInput
  AnnualClient: AnnualClientCreateNestedOneWithoutCartsInput
  Product: ProductCreateNestedOneWithoutCartsInput!
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input CartCreateManyAnnualBranchEmployeeInput {
  annualClientId: String
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  productId: String!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input CartCreateManyAnnualBranchEmployeeInputEnvelope {
  data: [CartCreateManyAnnualBranchEmployeeInput!]
  skipDuplicates: Boolean
}

input CartCreateManyAnnualClientInput {
  annualBranchEmployeeId: String
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  productId: String!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input CartCreateManyAnnualClientInputEnvelope {
  data: [CartCreateManyAnnualClientInput!]
  skipDuplicates: Boolean
}

input CartCreateManyProductInput {
  annualBranchEmployeeId: String
  annualClientId: String
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input CartCreateManyProductInputEnvelope {
  data: [CartCreateManyProductInput!]
  skipDuplicates: Boolean
}

input CartCreateNestedManyWithoutAnnualBranchEmployeeInput {
  connect: [CartWhereUniqueInput!]
  connectOrCreate: [CartCreateOrConnectWithoutAnnualBranchEmployeeInput!]
  create: [CartCreateWithoutAnnualBranchEmployeeInput!]
  createMany: CartCreateManyAnnualBranchEmployeeInputEnvelope
}

input CartCreateNestedManyWithoutAnnualClientInput {
  connect: [CartWhereUniqueInput!]
  connectOrCreate: [CartCreateOrConnectWithoutAnnualClientInput!]
  create: [CartCreateWithoutAnnualClientInput!]
  createMany: CartCreateManyAnnualClientInputEnvelope
}

input CartCreateNestedManyWithoutProductInput {
  connect: [CartWhereUniqueInput!]
  connectOrCreate: [CartCreateOrConnectWithoutProductInput!]
  create: [CartCreateWithoutProductInput!]
  createMany: CartCreateManyProductInputEnvelope
}

input CartCreateOrConnectWithoutAnnualBranchEmployeeInput {
  create: CartCreateWithoutAnnualBranchEmployeeInput!
  where: CartWhereUniqueInput!
}

input CartCreateOrConnectWithoutAnnualClientInput {
  create: CartCreateWithoutAnnualClientInput!
  where: CartWhereUniqueInput!
}

input CartCreateOrConnectWithoutProductInput {
  create: CartCreateWithoutProductInput!
  where: CartWhereUniqueInput!
}

input CartCreateWithoutAnnualBranchEmployeeInput {
  AnnualClient: AnnualClientCreateNestedOneWithoutCartsInput
  Product: ProductCreateNestedOneWithoutCartsInput!
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input CartCreateWithoutAnnualClientInput {
  AnnualBranchEmployee: AnnualBranchEmployeeCreateNestedOneWithoutCartsInput
  Product: ProductCreateNestedOneWithoutCartsInput!
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input CartCreateWithoutProductInput {
  AnnualBranchEmployee: AnnualBranchEmployeeCreateNestedOneWithoutCartsInput
  AnnualClient: AnnualClientCreateNestedOneWithoutCartsInput
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input CartScalarWhereInput {
  AND: [CartScalarWhereInput!]
  NOT: [CartScalarWhereInput!]
  OR: [CartScalarWhereInput!]
  annualBranchEmployeeId: StringNullableFilter
  annualClientId: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  orderDate: DateTimeFilter
  pdtCost: IntFilter
  productId: StringFilter
  qtty: FloatFilter
  salesPrice: IntFilter
  updatedAt: DateTimeFilter
}

input CartUpdateInput {
  AnnualBranchEmployee: AnnualBranchEmployeeUpdateOneWithoutCartsInput
  AnnualClient: AnnualClientUpdateOneWithoutCartsInput
  Product: ProductUpdateOneRequiredWithoutCartsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartUpdateManyWithWhereWithoutAnnualBranchEmployeeInput {
  data: CartUpdateManyMutationInput!
  where: CartScalarWhereInput!
}

input CartUpdateManyWithWhereWithoutAnnualClientInput {
  data: CartUpdateManyMutationInput!
  where: CartScalarWhereInput!
}

input CartUpdateManyWithWhereWithoutProductInput {
  data: CartUpdateManyMutationInput!
  where: CartScalarWhereInput!
}

input CartUpdateManyWithoutAnnualBranchEmployeeInput {
  connect: [CartWhereUniqueInput!]
  connectOrCreate: [CartCreateOrConnectWithoutAnnualBranchEmployeeInput!]
  create: [CartCreateWithoutAnnualBranchEmployeeInput!]
  createMany: CartCreateManyAnnualBranchEmployeeInputEnvelope
  delete: [CartWhereUniqueInput!]
  deleteMany: [CartScalarWhereInput!]
  disconnect: [CartWhereUniqueInput!]
  set: [CartWhereUniqueInput!]
  update: [CartUpdateWithWhereUniqueWithoutAnnualBranchEmployeeInput!]
  updateMany: [CartUpdateManyWithWhereWithoutAnnualBranchEmployeeInput!]
  upsert: [CartUpsertWithWhereUniqueWithoutAnnualBranchEmployeeInput!]
}

input CartUpdateManyWithoutAnnualClientInput {
  connect: [CartWhereUniqueInput!]
  connectOrCreate: [CartCreateOrConnectWithoutAnnualClientInput!]
  create: [CartCreateWithoutAnnualClientInput!]
  createMany: CartCreateManyAnnualClientInputEnvelope
  delete: [CartWhereUniqueInput!]
  deleteMany: [CartScalarWhereInput!]
  disconnect: [CartWhereUniqueInput!]
  set: [CartWhereUniqueInput!]
  update: [CartUpdateWithWhereUniqueWithoutAnnualClientInput!]
  updateMany: [CartUpdateManyWithWhereWithoutAnnualClientInput!]
  upsert: [CartUpsertWithWhereUniqueWithoutAnnualClientInput!]
}

input CartUpdateManyWithoutProductInput {
  connect: [CartWhereUniqueInput!]
  connectOrCreate: [CartCreateOrConnectWithoutProductInput!]
  create: [CartCreateWithoutProductInput!]
  createMany: CartCreateManyProductInputEnvelope
  delete: [CartWhereUniqueInput!]
  deleteMany: [CartScalarWhereInput!]
  disconnect: [CartWhereUniqueInput!]
  set: [CartWhereUniqueInput!]
  update: [CartUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [CartUpdateManyWithWhereWithoutProductInput!]
  upsert: [CartUpsertWithWhereUniqueWithoutProductInput!]
}

input CartUpdateWithWhereUniqueWithoutAnnualBranchEmployeeInput {
  data: CartUpdateWithoutAnnualBranchEmployeeInput!
  where: CartWhereUniqueInput!
}

input CartUpdateWithWhereUniqueWithoutAnnualClientInput {
  data: CartUpdateWithoutAnnualClientInput!
  where: CartWhereUniqueInput!
}

input CartUpdateWithWhereUniqueWithoutProductInput {
  data: CartUpdateWithoutProductInput!
  where: CartWhereUniqueInput!
}

input CartUpdateWithoutAnnualBranchEmployeeInput {
  AnnualClient: AnnualClientUpdateOneWithoutCartsInput
  Product: ProductUpdateOneRequiredWithoutCartsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartUpdateWithoutAnnualClientInput {
  AnnualBranchEmployee: AnnualBranchEmployeeUpdateOneWithoutCartsInput
  Product: ProductUpdateOneRequiredWithoutCartsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartUpdateWithoutProductInput {
  AnnualBranchEmployee: AnnualBranchEmployeeUpdateOneWithoutCartsInput
  AnnualClient: AnnualClientUpdateOneWithoutCartsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartUpsertWithWhereUniqueWithoutAnnualBranchEmployeeInput {
  create: CartCreateWithoutAnnualBranchEmployeeInput!
  update: CartUpdateWithoutAnnualBranchEmployeeInput!
  where: CartWhereUniqueInput!
}

input CartUpsertWithWhereUniqueWithoutAnnualClientInput {
  create: CartCreateWithoutAnnualClientInput!
  update: CartUpdateWithoutAnnualClientInput!
  where: CartWhereUniqueInput!
}

input CartUpsertWithWhereUniqueWithoutProductInput {
  create: CartCreateWithoutProductInput!
  update: CartUpdateWithoutProductInput!
  where: CartWhereUniqueInput!
}

input CartWhereUniqueInput {
  id: String
}

type Category {
  categoryCode: String!
  categoryName: String!
  id: String!
  products(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int): [Product!]!
}

input CategoryCreateInput {
  categoryCode: String!
  categoryName: String!
  createdAt: DateTime
  id: String
  products: ProductCreateNestedManyWithoutCategoryInput
  updatedAt: DateTime
}

input CategoryCreateNestedOneWithoutProductsInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutProductsInput
  create: CategoryCreateWithoutProductsInput
}

input CategoryCreateOrConnectWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutProductsInput {
  categoryCode: String!
  categoryName: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input CategoryUpdateInput {
  categoryCode: StringFieldUpdateOperationsInput
  categoryName: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutCategoryInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateOneWithoutProductsInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutProductsInput
  create: CategoryCreateWithoutProductsInput
  delete: Boolean
  disconnect: Boolean
  update: CategoryUpdateWithoutProductsInput
  upsert: CategoryUpsertWithoutProductsInput
}

input CategoryUpdateWithoutProductsInput {
  categoryCode: StringFieldUpdateOperationsInput
  categoryName: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpsertWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput!
  update: CategoryUpdateWithoutProductsInput!
}

input CategoryWhereUniqueInput {
  id: String
}

type Client {
  clientNames: String!
  clientPhoneNumb: Int!
  id: String!
}

input ClientCreateInput {
  annClients: AnnualClientCreateNestedManyWithoutClientInput
  clientNames: String!
  clientPhoneNumb: Int!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input ClientCreateNestedOneWithoutAnnClientsInput {
  connect: ClientWhereUniqueInput
  connectOrCreate: ClientCreateOrConnectWithoutAnnClientsInput
  create: ClientCreateWithoutAnnClientsInput
}

input ClientCreateOrConnectWithoutAnnClientsInput {
  create: ClientCreateWithoutAnnClientsInput!
  where: ClientWhereUniqueInput!
}

input ClientCreateWithoutAnnClientsInput {
  clientNames: String!
  clientPhoneNumb: Int!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input ClientUpdateInput {
  annClients: AnnualClientUpdateManyWithoutClientInput
  clientNames: StringFieldUpdateOperationsInput
  clientPhoneNumb: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClientUpdateOneWithoutAnnClientsInput {
  connect: ClientWhereUniqueInput
  connectOrCreate: ClientCreateOrConnectWithoutAnnClientsInput
  create: ClientCreateWithoutAnnClientsInput
  delete: Boolean
  disconnect: Boolean
  update: ClientUpdateWithoutAnnClientsInput
  upsert: ClientUpsertWithoutAnnClientsInput
}

input ClientUpdateWithoutAnnClientsInput {
  clientNames: StringFieldUpdateOperationsInput
  clientPhoneNumb: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClientUpsertWithoutAnnClientsInput {
  create: ClientCreateWithoutAnnClientsInput!
  update: ClientUpdateWithoutAnnClientsInput!
}

input ClientWhereUniqueInput {
  clientPhoneNumb: Int
  id: String
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Employee {
  branchEmpls(after: BranchEmployeeWhereUniqueInput, before: BranchEmployeeWhereUniqueInput, first: Int, last: Int): [BranchEmployee!]!
  employeeCode: String!
  employeeNames: String!
  employeePhoneNumb: Int!
  id: String!
}

input EmployeeCreateInput {
  branchEmpls: BranchEmployeeCreateNestedManyWithoutEmployeeInput
  createdAt: DateTime
  employeeCode: String!
  employeeNames: String!
  employeePhoneNumb: Int!
  id: String
  updatedAt: DateTime
}

input EmployeeCreateNestedOneWithoutBranchEmplsInput {
  connect: EmployeeWhereUniqueInput
  connectOrCreate: EmployeeCreateOrConnectWithoutBranchEmplsInput
  create: EmployeeCreateWithoutBranchEmplsInput
}

input EmployeeCreateOrConnectWithoutBranchEmplsInput {
  create: EmployeeCreateWithoutBranchEmplsInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeCreateWithoutBranchEmplsInput {
  createdAt: DateTime
  employeeCode: String!
  employeeNames: String!
  employeePhoneNumb: Int!
  id: String
  updatedAt: DateTime
}

type EmployeeStatus {
  id: String!
  status: String!
}

input EmployeeStatusCreateInput {
  branchEmpls: BranchEmployeeCreateNestedManyWithoutEmployeeStatusInput
  createdAt: DateTime
  id: String
  status: String!
  updatedAt: DateTime
}

input EmployeeStatusCreateNestedOneWithoutBranchEmplsInput {
  connect: EmployeeStatusWhereUniqueInput
  connectOrCreate: EmployeeStatusCreateOrConnectWithoutBranchEmplsInput
  create: EmployeeStatusCreateWithoutBranchEmplsInput
}

input EmployeeStatusCreateOrConnectWithoutBranchEmplsInput {
  create: EmployeeStatusCreateWithoutBranchEmplsInput!
  where: EmployeeStatusWhereUniqueInput!
}

input EmployeeStatusCreateWithoutBranchEmplsInput {
  createdAt: DateTime
  id: String
  status: String!
  updatedAt: DateTime
}

input EmployeeStatusUpdateInput {
  branchEmpls: BranchEmployeeUpdateManyWithoutEmployeeStatusInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeStatusUpdateOneRequiredWithoutBranchEmplsInput {
  connect: EmployeeStatusWhereUniqueInput
  connectOrCreate: EmployeeStatusCreateOrConnectWithoutBranchEmplsInput
  create: EmployeeStatusCreateWithoutBranchEmplsInput
  update: EmployeeStatusUpdateWithoutBranchEmplsInput
  upsert: EmployeeStatusUpsertWithoutBranchEmplsInput
}

input EmployeeStatusUpdateWithoutBranchEmplsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeStatusUpsertWithoutBranchEmplsInput {
  create: EmployeeStatusCreateWithoutBranchEmplsInput!
  update: EmployeeStatusUpdateWithoutBranchEmplsInput!
}

input EmployeeStatusWhereUniqueInput {
  id: String
}

input EmployeeUpdateInput {
  branchEmpls: BranchEmployeeUpdateManyWithoutEmployeeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  employeeCode: StringFieldUpdateOperationsInput
  employeeNames: StringFieldUpdateOperationsInput
  employeePhoneNumb: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeUpdateOneRequiredWithoutBranchEmplsInput {
  connect: EmployeeWhereUniqueInput
  connectOrCreate: EmployeeCreateOrConnectWithoutBranchEmplsInput
  create: EmployeeCreateWithoutBranchEmplsInput
  update: EmployeeUpdateWithoutBranchEmplsInput
  upsert: EmployeeUpsertWithoutBranchEmplsInput
}

input EmployeeUpdateWithoutBranchEmplsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  employeeCode: StringFieldUpdateOperationsInput
  employeeNames: StringFieldUpdateOperationsInput
  employeePhoneNumb: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeUpsertWithoutBranchEmplsInput {
  create: EmployeeCreateWithoutBranchEmplsInput!
  update: EmployeeUpdateWithoutBranchEmplsInput!
}

input EmployeeWhereUniqueInput {
  employeeCode: String
  employeePhoneNumb: Int
  id: String
}

type Finance {
  Order: Order!
  amtPaid: Int!
  id: String!
  orderId: String!
}

input FinanceCreateInput {
  Order: OrderCreateNestedOneWithoutFinancesInput!
  amtPaid: Int!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input FinanceCreateManyOrderInput {
  amtPaid: Int!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input FinanceCreateManyOrderInputEnvelope {
  data: [FinanceCreateManyOrderInput!]
  skipDuplicates: Boolean
}

input FinanceCreateNestedManyWithoutOrderInput {
  connect: [FinanceWhereUniqueInput!]
  connectOrCreate: [FinanceCreateOrConnectWithoutOrderInput!]
  create: [FinanceCreateWithoutOrderInput!]
  createMany: FinanceCreateManyOrderInputEnvelope
}

input FinanceCreateOrConnectWithoutOrderInput {
  create: FinanceCreateWithoutOrderInput!
  where: FinanceWhereUniqueInput!
}

input FinanceCreateWithoutOrderInput {
  amtPaid: Int!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input FinanceScalarWhereInput {
  AND: [FinanceScalarWhereInput!]
  NOT: [FinanceScalarWhereInput!]
  OR: [FinanceScalarWhereInput!]
  amtPaid: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  orderId: StringFilter
  updatedAt: DateTimeFilter
}

input FinanceUpdateInput {
  Order: OrderUpdateOneRequiredWithoutFinancesInput
  amtPaid: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FinanceUpdateManyMutationInput {
  amtPaid: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FinanceUpdateManyWithWhereWithoutOrderInput {
  data: FinanceUpdateManyMutationInput!
  where: FinanceScalarWhereInput!
}

input FinanceUpdateManyWithoutOrderInput {
  connect: [FinanceWhereUniqueInput!]
  connectOrCreate: [FinanceCreateOrConnectWithoutOrderInput!]
  create: [FinanceCreateWithoutOrderInput!]
  createMany: FinanceCreateManyOrderInputEnvelope
  delete: [FinanceWhereUniqueInput!]
  deleteMany: [FinanceScalarWhereInput!]
  disconnect: [FinanceWhereUniqueInput!]
  set: [FinanceWhereUniqueInput!]
  update: [FinanceUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [FinanceUpdateManyWithWhereWithoutOrderInput!]
  upsert: [FinanceUpsertWithWhereUniqueWithoutOrderInput!]
}

input FinanceUpdateWithWhereUniqueWithoutOrderInput {
  data: FinanceUpdateWithoutOrderInput!
  where: FinanceWhereUniqueInput!
}

input FinanceUpdateWithoutOrderInput {
  amtPaid: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FinanceUpsertWithWhereUniqueWithoutOrderInput {
  create: FinanceCreateWithoutOrderInput!
  update: FinanceUpdateWithoutOrderInput!
  where: FinanceWhereUniqueInput!
}

input FinanceWhereUniqueInput {
  id: String
}

type FinancialYear {
  annBranchEmpls(after: AnnualBranchEmployeeWhereUniqueInput, before: AnnualBranchEmployeeWhereUniqueInput, first: Int, last: Int): [AnnualBranchEmployee!]!
  annClients(after: AnnualClientWhereUniqueInput, before: AnnualClientWhereUniqueInput, first: Int, last: Int): [AnnualClient!]!
  id: String!
  yearName: Int!
}

input FinancialYearCreateInput {
  annBranchEmpls: AnnualBranchEmployeeCreateNestedManyWithoutFinancialYearInput
  annClients: AnnualClientCreateNestedManyWithoutFinancialYearInput
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  yearName: Int!
}

input FinancialYearCreateNestedOneWithoutAnnBranchEmplsInput {
  connect: FinancialYearWhereUniqueInput
  connectOrCreate: FinancialYearCreateOrConnectWithoutAnnBranchEmplsInput
  create: FinancialYearCreateWithoutAnnBranchEmplsInput
}

input FinancialYearCreateNestedOneWithoutAnnClientsInput {
  connect: FinancialYearWhereUniqueInput
  connectOrCreate: FinancialYearCreateOrConnectWithoutAnnClientsInput
  create: FinancialYearCreateWithoutAnnClientsInput
}

input FinancialYearCreateOrConnectWithoutAnnBranchEmplsInput {
  create: FinancialYearCreateWithoutAnnBranchEmplsInput!
  where: FinancialYearWhereUniqueInput!
}

input FinancialYearCreateOrConnectWithoutAnnClientsInput {
  create: FinancialYearCreateWithoutAnnClientsInput!
  where: FinancialYearWhereUniqueInput!
}

input FinancialYearCreateWithoutAnnBranchEmplsInput {
  annClients: AnnualClientCreateNestedManyWithoutFinancialYearInput
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  yearName: Int!
}

input FinancialYearCreateWithoutAnnClientsInput {
  annBranchEmpls: AnnualBranchEmployeeCreateNestedManyWithoutFinancialYearInput
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  yearName: Int!
}

input FinancialYearUpdateInput {
  annBranchEmpls: AnnualBranchEmployeeUpdateManyWithoutFinancialYearInput
  annClients: AnnualClientUpdateManyWithoutFinancialYearInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  yearName: IntFieldUpdateOperationsInput
}

input FinancialYearUpdateOneWithoutAnnBranchEmplsInput {
  connect: FinancialYearWhereUniqueInput
  connectOrCreate: FinancialYearCreateOrConnectWithoutAnnBranchEmplsInput
  create: FinancialYearCreateWithoutAnnBranchEmplsInput
  delete: Boolean
  disconnect: Boolean
  update: FinancialYearUpdateWithoutAnnBranchEmplsInput
  upsert: FinancialYearUpsertWithoutAnnBranchEmplsInput
}

input FinancialYearUpdateOneWithoutAnnClientsInput {
  connect: FinancialYearWhereUniqueInput
  connectOrCreate: FinancialYearCreateOrConnectWithoutAnnClientsInput
  create: FinancialYearCreateWithoutAnnClientsInput
  delete: Boolean
  disconnect: Boolean
  update: FinancialYearUpdateWithoutAnnClientsInput
  upsert: FinancialYearUpsertWithoutAnnClientsInput
}

input FinancialYearUpdateWithoutAnnBranchEmplsInput {
  annClients: AnnualClientUpdateManyWithoutFinancialYearInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  yearName: IntFieldUpdateOperationsInput
}

input FinancialYearUpdateWithoutAnnClientsInput {
  annBranchEmpls: AnnualBranchEmployeeUpdateManyWithoutFinancialYearInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  yearName: IntFieldUpdateOperationsInput
}

input FinancialYearUpsertWithoutAnnBranchEmplsInput {
  create: FinancialYearCreateWithoutAnnBranchEmplsInput!
  update: FinancialYearUpdateWithoutAnnBranchEmplsInput!
}

input FinancialYearUpsertWithoutAnnClientsInput {
  create: FinancialYearCreateWithoutAnnClientsInput!
  update: FinancialYearUpdateWithoutAnnClientsInput!
}

input FinancialYearWhereUniqueInput {
  id: String
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Inventory {
  id: String!
  qttyInHand: Int!
}

input InventoryCreateInput {
  createdAt: DateTime
  id: String
  qttyInHand: Int!
  updatedAt: DateTime
}

input InventoryUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  qttyInHand: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input InventoryWhereUniqueInput {
  id: String
}

type Mutation {
  """Stores a AnnualBranchEmployee manually"""
  createAnnualBranchEmployee(data: AnnualBranchEmployeeCreateInput!): AnnualBranchEmployee

  """Stores a AnnualClient manually"""
  createAnnualClient(data: AnnualClientCreateInput!): AnnualClient

  """Stores a Bonus manually"""
  createBonus(data: BonusCreateInput!): Bonus

  """Stores a Branch manually"""
  createBranch(data: BranchCreateInput!): Branch

  """Stores a BranchEmployee manually"""
  createBranchEmployee(data: BranchEmployeeCreateInput!): BranchEmployee

  """Stores a Cart manually"""
  createCart(data: CartCreateInput!): Cart

  """Stores a Category manually"""
  createCategory(data: CategoryCreateInput!): Category

  """Stores a Client manually"""
  createClient(data: ClientCreateInput!): Client

  """Stores a Employee manually"""
  createEmployee(data: EmployeeCreateInput!): Employee

  """Stores a EmployeeStatus manually"""
  createEmployeeStatus(data: EmployeeStatusCreateInput!): EmployeeStatus

  """Stores a Finance manually"""
  createFinance(data: FinanceCreateInput!): Finance

  """Stores a FinancialYear manually"""
  createFinancialYear(data: FinancialYearCreateInput!): FinancialYear

  """Stores a Inventory manually"""
  createInventory(data: InventoryCreateInput!): Inventory
  createOneAnnualBranchEmployee(data: AnnualBranchEmployeeCreateInput!): AnnualBranchEmployee!
  createOneAnnualClient(data: AnnualClientCreateInput!): AnnualClient!
  createOneBonus(data: BonusCreateInput!): Bonus!
  createOneBranch(data: BranchCreateInput!): Branch!
  createOneBranchEmployee(data: BranchEmployeeCreateInput!): BranchEmployee!
  createOneCart(data: CartCreateInput!): Cart!
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneClient(data: ClientCreateInput!): Client!
  createOneEmployee(data: EmployeeCreateInput!): Employee!
  createOneEmployeeStatus(data: EmployeeStatusCreateInput!): EmployeeStatus!
  createOneFinance(data: FinanceCreateInput!): Finance!
  createOneFinancialYear(data: FinancialYearCreateInput!): FinancialYear!
  createOneInventory(data: InventoryCreateInput!): Inventory!
  createOneOrder(data: OrderCreateInput!): Order!
  createOneOrderDetail(data: OrderDetailCreateInput!): OrderDetail!
  createOneProduct(data: ProductCreateInput!): Product!

  """Stores an  Order manually"""
  createOrder(data: OrderCreateInput!): Order

  """Stores a OrderDetail manually"""
  createOrderDetail(data: OrderDetailCreateInput!): OrderDetail

  """Stores a Product manually"""
  createProduct(data: ProductCreateInput!): Product

  """deletes a branchEmployee manually"""
  deleteAnnualBranchEmployee(where: AnnualBranchEmployeeWhereUniqueInput!): AnnualBranchEmployee

  """deletes a annualClient manually"""
  deleteAnnualClient(where: AnnualClientWhereUniqueInput!): AnnualClient

  """deletes a Bonus manually"""
  deleteBonus(where: BonusWhereUniqueInput!): Bonus

  """deletes a branch manually"""
  deleteBranch(where: BranchWhereUniqueInput!): Branch

  """deletes a branchEmployee manually"""
  deleteBranchEmployee(where: BranchEmployeeWhereUniqueInput!): BranchEmployee

  """deletes a cart manually"""
  deleteCart(where: CartWhereUniqueInput!): Cart

  """deletes a category manually"""
  deleteCategory(where: CategoryWhereUniqueInput!): Category

  """deletes a client manually"""
  deleteClient(where: ClientWhereUniqueInput!): Client

  """deletes a employee manually"""
  deleteEmployee(where: EmployeeWhereUniqueInput!): Employee

  """deletes a employeeStatus manually"""
  deleteEmployeeStatus(where: EmployeeStatusWhereUniqueInput!): EmployeeStatus

  """deletes a finance manually"""
  deleteFinance(where: FinanceWhereUniqueInput!): Finance

  """deletes a financialYear manually"""
  deleteFinancialYear(where: FinancialYearWhereUniqueInput!): FinancialYear

  """deletes a inventory manually"""
  deleteInventory(where: InventoryWhereUniqueInput!): Inventory
  deleteOneAnnualBranchEmployee(where: AnnualBranchEmployeeWhereUniqueInput!): AnnualBranchEmployee
  deleteOneAnnualClient(where: AnnualClientWhereUniqueInput!): AnnualClient
  deleteOneBonus(where: BonusWhereUniqueInput!): Bonus
  deleteOneBranch(where: BranchWhereUniqueInput!): Branch
  deleteOneBranchEmployee(where: BranchEmployeeWhereUniqueInput!): BranchEmployee
  deleteOneCart(where: CartWhereUniqueInput!): Cart
  deleteOneCategory(where: CategoryWhereUniqueInput!): Category
  deleteOneClient(where: ClientWhereUniqueInput!): Client
  deleteOneEmployee(where: EmployeeWhereUniqueInput!): Employee
  deleteOneEmployeeStatus(where: EmployeeStatusWhereUniqueInput!): EmployeeStatus
  deleteOneFinance(where: FinanceWhereUniqueInput!): Finance
  deleteOneFinancialYear(where: FinancialYearWhereUniqueInput!): FinancialYear
  deleteOneInventory(where: InventoryWhereUniqueInput!): Inventory
  deleteOneOrder(where: OrderWhereUniqueInput!): Order
  deleteOneOrderDetail(where: OrderDetailWhereUniqueInput!): OrderDetail
  deleteOneProduct(where: ProductWhereUniqueInput!): Product

  """deletes a Order manually"""
  deleteOrder(where: OrderWhereUniqueInput!): Order

  """deletes a OrderDetail manually"""
  deleteOrderDetail(where: OrderDetailWhereUniqueInput!): OrderDetail

  """deletes a Product manually"""
  deleteProduct(where: ProductWhereUniqueInput!): Product
  updateOneAnnualBranchEmployee(data: AnnualBranchEmployeeUpdateInput!, where: AnnualBranchEmployeeWhereUniqueInput!): AnnualBranchEmployee
  updateOneAnnualClient(data: AnnualClientUpdateInput!, where: AnnualClientWhereUniqueInput!): AnnualClient
  updateOneBonus(data: BonusUpdateInput!, where: BonusWhereUniqueInput!): Bonus
  updateOneBranch(data: BranchUpdateInput!, where: BranchWhereUniqueInput!): Branch
  updateOneBranchEmployee(data: BranchEmployeeUpdateInput!, where: BranchEmployeeWhereUniqueInput!): BranchEmployee
  updateOneCart(data: CartUpdateInput!, where: CartWhereUniqueInput!): Cart
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneClient(data: ClientUpdateInput!, where: ClientWhereUniqueInput!): Client
  updateOneEmployee(data: EmployeeUpdateInput!, where: EmployeeWhereUniqueInput!): Employee
  updateOneEmployeeStatus(data: EmployeeStatusUpdateInput!, where: EmployeeStatusWhereUniqueInput!): EmployeeStatus
  updateOneFinance(data: FinanceUpdateInput!, where: FinanceWhereUniqueInput!): Finance
  updateOneFinancialYear(data: FinancialYearUpdateInput!, where: FinancialYearWhereUniqueInput!): FinancialYear
  updateOneInventory(data: InventoryUpdateInput!, where: InventoryWhereUniqueInput!): Inventory
  updateOneOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateOneOrderDetail(data: OrderDetailUpdateInput!, where: OrderDetailWhereUniqueInput!): OrderDetail
  updateOneProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Order {
  AnnualBranchEmployee: AnnualBranchEmployee
  AnnualClient: AnnualClient
  annualBranchEmployeeId: String
  annualClientId: String
  finances(after: FinanceWhereUniqueInput, before: FinanceWhereUniqueInput, first: Int, last: Int): [Finance!]!
  id: String!
  orderDate: DateTime!
  orderDetails(after: OrderDetailWhereUniqueInput, before: OrderDetailWhereUniqueInput, first: Int, last: Int): [OrderDetail!]!
  orderNumber: String!
  orderTotal: Int!
  totalPaid: Int!
}

input OrderCreateInput {
  AnnualBranchEmployee: AnnualBranchEmployeeCreateNestedOneWithoutOrdersInput
  AnnualClient: AnnualClientCreateNestedOneWithoutOrdersInput
  createdAt: DateTime
  finances: FinanceCreateNestedManyWithoutOrderInput
  id: String
  orderDate: DateTime
  orderDetails: OrderDetailCreateNestedManyWithoutOrderInput
  orderNumber: String!
  orderTotal: Int!
  totalPaid: Int!
  updatedAt: DateTime
}

input OrderCreateManyAnnualBranchEmployeeInput {
  annualClientId: String
  createdAt: DateTime
  id: String
  orderDate: DateTime
  orderNumber: String!
  orderTotal: Int!
  totalPaid: Int!
  updatedAt: DateTime
}

input OrderCreateManyAnnualBranchEmployeeInputEnvelope {
  data: [OrderCreateManyAnnualBranchEmployeeInput!]
  skipDuplicates: Boolean
}

input OrderCreateManyAnnualClientInput {
  annualBranchEmployeeId: String
  createdAt: DateTime
  id: String
  orderDate: DateTime
  orderNumber: String!
  orderTotal: Int!
  totalPaid: Int!
  updatedAt: DateTime
}

input OrderCreateManyAnnualClientInputEnvelope {
  data: [OrderCreateManyAnnualClientInput!]
  skipDuplicates: Boolean
}

input OrderCreateNestedManyWithoutAnnualBranchEmployeeInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutAnnualBranchEmployeeInput!]
  create: [OrderCreateWithoutAnnualBranchEmployeeInput!]
  createMany: OrderCreateManyAnnualBranchEmployeeInputEnvelope
}

input OrderCreateNestedManyWithoutAnnualClientInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutAnnualClientInput!]
  create: [OrderCreateWithoutAnnualClientInput!]
  createMany: OrderCreateManyAnnualClientInputEnvelope
}

input OrderCreateNestedOneWithoutFinancesInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutFinancesInput
  create: OrderCreateWithoutFinancesInput
}

input OrderCreateNestedOneWithoutOrderDetailsInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutOrderDetailsInput
  create: OrderCreateWithoutOrderDetailsInput
}

input OrderCreateOrConnectWithoutAnnualBranchEmployeeInput {
  create: OrderCreateWithoutAnnualBranchEmployeeInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateOrConnectWithoutAnnualClientInput {
  create: OrderCreateWithoutAnnualClientInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateOrConnectWithoutFinancesInput {
  create: OrderCreateWithoutFinancesInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateOrConnectWithoutOrderDetailsInput {
  create: OrderCreateWithoutOrderDetailsInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateWithoutAnnualBranchEmployeeInput {
  AnnualClient: AnnualClientCreateNestedOneWithoutOrdersInput
  createdAt: DateTime
  finances: FinanceCreateNestedManyWithoutOrderInput
  id: String
  orderDate: DateTime
  orderDetails: OrderDetailCreateNestedManyWithoutOrderInput
  orderNumber: String!
  orderTotal: Int!
  totalPaid: Int!
  updatedAt: DateTime
}

input OrderCreateWithoutAnnualClientInput {
  AnnualBranchEmployee: AnnualBranchEmployeeCreateNestedOneWithoutOrdersInput
  createdAt: DateTime
  finances: FinanceCreateNestedManyWithoutOrderInput
  id: String
  orderDate: DateTime
  orderDetails: OrderDetailCreateNestedManyWithoutOrderInput
  orderNumber: String!
  orderTotal: Int!
  totalPaid: Int!
  updatedAt: DateTime
}

input OrderCreateWithoutFinancesInput {
  AnnualBranchEmployee: AnnualBranchEmployeeCreateNestedOneWithoutOrdersInput
  AnnualClient: AnnualClientCreateNestedOneWithoutOrdersInput
  createdAt: DateTime
  id: String
  orderDate: DateTime
  orderDetails: OrderDetailCreateNestedManyWithoutOrderInput
  orderNumber: String!
  orderTotal: Int!
  totalPaid: Int!
  updatedAt: DateTime
}

input OrderCreateWithoutOrderDetailsInput {
  AnnualBranchEmployee: AnnualBranchEmployeeCreateNestedOneWithoutOrdersInput
  AnnualClient: AnnualClientCreateNestedOneWithoutOrdersInput
  createdAt: DateTime
  finances: FinanceCreateNestedManyWithoutOrderInput
  id: String
  orderDate: DateTime
  orderNumber: String!
  orderTotal: Int!
  totalPaid: Int!
  updatedAt: DateTime
}

type OrderDetail {
  Order: Order!
  Product: Product!
  id: String!
  orderId: String!
  pdtCost: Int!
  productId: String!
  qtty: Float!
  salesPrice: Int!
}

input OrderDetailCreateInput {
  Order: OrderCreateNestedOneWithoutOrderDetailsInput!
  Product: ProductCreateNestedOneWithoutOrderDetailsInput!
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input OrderDetailCreateManyOrderInput {
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  productId: String!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input OrderDetailCreateManyOrderInputEnvelope {
  data: [OrderDetailCreateManyOrderInput!]
  skipDuplicates: Boolean
}

input OrderDetailCreateManyProductInput {
  createdAt: DateTime
  id: String
  orderDate: DateTime
  orderId: String!
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input OrderDetailCreateManyProductInputEnvelope {
  data: [OrderDetailCreateManyProductInput!]
  skipDuplicates: Boolean
}

input OrderDetailCreateNestedManyWithoutOrderInput {
  connect: [OrderDetailWhereUniqueInput!]
  connectOrCreate: [OrderDetailCreateOrConnectWithoutOrderInput!]
  create: [OrderDetailCreateWithoutOrderInput!]
  createMany: OrderDetailCreateManyOrderInputEnvelope
}

input OrderDetailCreateNestedManyWithoutProductInput {
  connect: [OrderDetailWhereUniqueInput!]
  connectOrCreate: [OrderDetailCreateOrConnectWithoutProductInput!]
  create: [OrderDetailCreateWithoutProductInput!]
  createMany: OrderDetailCreateManyProductInputEnvelope
}

input OrderDetailCreateOrConnectWithoutOrderInput {
  create: OrderDetailCreateWithoutOrderInput!
  where: OrderDetailWhereUniqueInput!
}

input OrderDetailCreateOrConnectWithoutProductInput {
  create: OrderDetailCreateWithoutProductInput!
  where: OrderDetailWhereUniqueInput!
}

input OrderDetailCreateWithoutOrderInput {
  Product: ProductCreateNestedOneWithoutOrderDetailsInput!
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input OrderDetailCreateWithoutProductInput {
  Order: OrderCreateNestedOneWithoutOrderDetailsInput!
  createdAt: DateTime
  id: String
  orderDate: DateTime
  pdtCost: Int!
  qtty: Float!
  salesPrice: Int!
  updatedAt: DateTime
}

input OrderDetailScalarWhereInput {
  AND: [OrderDetailScalarWhereInput!]
  NOT: [OrderDetailScalarWhereInput!]
  OR: [OrderDetailScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  orderDate: DateTimeFilter
  orderId: StringFilter
  pdtCost: IntFilter
  productId: StringFilter
  qtty: FloatFilter
  salesPrice: IntFilter
  updatedAt: DateTimeFilter
}

input OrderDetailUpdateInput {
  Order: OrderUpdateOneRequiredWithoutOrderDetailsInput
  Product: ProductUpdateOneRequiredWithoutOrderDetailsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderDetailUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderDetailUpdateManyWithWhereWithoutOrderInput {
  data: OrderDetailUpdateManyMutationInput!
  where: OrderDetailScalarWhereInput!
}

input OrderDetailUpdateManyWithWhereWithoutProductInput {
  data: OrderDetailUpdateManyMutationInput!
  where: OrderDetailScalarWhereInput!
}

input OrderDetailUpdateManyWithoutOrderInput {
  connect: [OrderDetailWhereUniqueInput!]
  connectOrCreate: [OrderDetailCreateOrConnectWithoutOrderInput!]
  create: [OrderDetailCreateWithoutOrderInput!]
  createMany: OrderDetailCreateManyOrderInputEnvelope
  delete: [OrderDetailWhereUniqueInput!]
  deleteMany: [OrderDetailScalarWhereInput!]
  disconnect: [OrderDetailWhereUniqueInput!]
  set: [OrderDetailWhereUniqueInput!]
  update: [OrderDetailUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [OrderDetailUpdateManyWithWhereWithoutOrderInput!]
  upsert: [OrderDetailUpsertWithWhereUniqueWithoutOrderInput!]
}

input OrderDetailUpdateManyWithoutProductInput {
  connect: [OrderDetailWhereUniqueInput!]
  connectOrCreate: [OrderDetailCreateOrConnectWithoutProductInput!]
  create: [OrderDetailCreateWithoutProductInput!]
  createMany: OrderDetailCreateManyProductInputEnvelope
  delete: [OrderDetailWhereUniqueInput!]
  deleteMany: [OrderDetailScalarWhereInput!]
  disconnect: [OrderDetailWhereUniqueInput!]
  set: [OrderDetailWhereUniqueInput!]
  update: [OrderDetailUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [OrderDetailUpdateManyWithWhereWithoutProductInput!]
  upsert: [OrderDetailUpsertWithWhereUniqueWithoutProductInput!]
}

input OrderDetailUpdateWithWhereUniqueWithoutOrderInput {
  data: OrderDetailUpdateWithoutOrderInput!
  where: OrderDetailWhereUniqueInput!
}

input OrderDetailUpdateWithWhereUniqueWithoutProductInput {
  data: OrderDetailUpdateWithoutProductInput!
  where: OrderDetailWhereUniqueInput!
}

input OrderDetailUpdateWithoutOrderInput {
  Product: ProductUpdateOneRequiredWithoutOrderDetailsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderDetailUpdateWithoutProductInput {
  Order: OrderUpdateOneRequiredWithoutOrderDetailsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  pdtCost: IntFieldUpdateOperationsInput
  qtty: FloatFieldUpdateOperationsInput
  salesPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderDetailUpsertWithWhereUniqueWithoutOrderInput {
  create: OrderDetailCreateWithoutOrderInput!
  update: OrderDetailUpdateWithoutOrderInput!
  where: OrderDetailWhereUniqueInput!
}

input OrderDetailUpsertWithWhereUniqueWithoutProductInput {
  create: OrderDetailCreateWithoutProductInput!
  update: OrderDetailUpdateWithoutProductInput!
  where: OrderDetailWhereUniqueInput!
}

input OrderDetailWhereUniqueInput {
  id: String
}

input OrderScalarWhereInput {
  AND: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  annualBranchEmployeeId: StringNullableFilter
  annualClientId: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  orderDate: DateTimeFilter
  orderNumber: StringFilter
  orderTotal: IntFilter
  totalPaid: IntFilter
  updatedAt: DateTimeFilter
}

input OrderUpdateInput {
  AnnualBranchEmployee: AnnualBranchEmployeeUpdateOneWithoutOrdersInput
  AnnualClient: AnnualClientUpdateOneWithoutOrdersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  finances: FinanceUpdateManyWithoutOrderInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  orderDetails: OrderDetailUpdateManyWithoutOrderInput
  orderNumber: StringFieldUpdateOperationsInput
  orderTotal: IntFieldUpdateOperationsInput
  totalPaid: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  orderNumber: StringFieldUpdateOperationsInput
  orderTotal: IntFieldUpdateOperationsInput
  totalPaid: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateManyWithWhereWithoutAnnualBranchEmployeeInput {
  data: OrderUpdateManyMutationInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateManyWithWhereWithoutAnnualClientInput {
  data: OrderUpdateManyMutationInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateManyWithoutAnnualBranchEmployeeInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutAnnualBranchEmployeeInput!]
  create: [OrderCreateWithoutAnnualBranchEmployeeInput!]
  createMany: OrderCreateManyAnnualBranchEmployeeInputEnvelope
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutAnnualBranchEmployeeInput!]
  updateMany: [OrderUpdateManyWithWhereWithoutAnnualBranchEmployeeInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutAnnualBranchEmployeeInput!]
}

input OrderUpdateManyWithoutAnnualClientInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutAnnualClientInput!]
  create: [OrderCreateWithoutAnnualClientInput!]
  createMany: OrderCreateManyAnnualClientInputEnvelope
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutAnnualClientInput!]
  updateMany: [OrderUpdateManyWithWhereWithoutAnnualClientInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutAnnualClientInput!]
}

input OrderUpdateOneRequiredWithoutFinancesInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutFinancesInput
  create: OrderCreateWithoutFinancesInput
  update: OrderUpdateWithoutFinancesInput
  upsert: OrderUpsertWithoutFinancesInput
}

input OrderUpdateOneRequiredWithoutOrderDetailsInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutOrderDetailsInput
  create: OrderCreateWithoutOrderDetailsInput
  update: OrderUpdateWithoutOrderDetailsInput
  upsert: OrderUpsertWithoutOrderDetailsInput
}

input OrderUpdateWithWhereUniqueWithoutAnnualBranchEmployeeInput {
  data: OrderUpdateWithoutAnnualBranchEmployeeInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithWhereUniqueWithoutAnnualClientInput {
  data: OrderUpdateWithoutAnnualClientInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithoutAnnualBranchEmployeeInput {
  AnnualClient: AnnualClientUpdateOneWithoutOrdersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  finances: FinanceUpdateManyWithoutOrderInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  orderDetails: OrderDetailUpdateManyWithoutOrderInput
  orderNumber: StringFieldUpdateOperationsInput
  orderTotal: IntFieldUpdateOperationsInput
  totalPaid: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateWithoutAnnualClientInput {
  AnnualBranchEmployee: AnnualBranchEmployeeUpdateOneWithoutOrdersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  finances: FinanceUpdateManyWithoutOrderInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  orderDetails: OrderDetailUpdateManyWithoutOrderInput
  orderNumber: StringFieldUpdateOperationsInput
  orderTotal: IntFieldUpdateOperationsInput
  totalPaid: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateWithoutFinancesInput {
  AnnualBranchEmployee: AnnualBranchEmployeeUpdateOneWithoutOrdersInput
  AnnualClient: AnnualClientUpdateOneWithoutOrdersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  orderDetails: OrderDetailUpdateManyWithoutOrderInput
  orderNumber: StringFieldUpdateOperationsInput
  orderTotal: IntFieldUpdateOperationsInput
  totalPaid: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateWithoutOrderDetailsInput {
  AnnualBranchEmployee: AnnualBranchEmployeeUpdateOneWithoutOrdersInput
  AnnualClient: AnnualClientUpdateOneWithoutOrdersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  finances: FinanceUpdateManyWithoutOrderInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  orderNumber: StringFieldUpdateOperationsInput
  orderTotal: IntFieldUpdateOperationsInput
  totalPaid: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpsertWithWhereUniqueWithoutAnnualBranchEmployeeInput {
  create: OrderCreateWithoutAnnualBranchEmployeeInput!
  update: OrderUpdateWithoutAnnualBranchEmployeeInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithWhereUniqueWithoutAnnualClientInput {
  create: OrderCreateWithoutAnnualClientInput!
  update: OrderUpdateWithoutAnnualClientInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithoutFinancesInput {
  create: OrderCreateWithoutFinancesInput!
  update: OrderUpdateWithoutFinancesInput!
}

input OrderUpsertWithoutOrderDetailsInput {
  create: OrderCreateWithoutOrderDetailsInput!
  update: OrderUpdateWithoutOrderDetailsInput!
}

input OrderWhereUniqueInput {
  id: String
}

type Product {
  Category: Category
  carts(after: CartWhereUniqueInput, before: CartWhereUniqueInput, first: Int, last: Int): [Cart!]!
  categoryId: String
  id: String!
  orderDetails(after: OrderDetailWhereUniqueInput, before: OrderDetailWhereUniqueInput, first: Int, last: Int): [OrderDetail!]!
  pdtCode: String!
  pdtName: String!
  unitPrice: Int!
}

input ProductCreateInput {
  Category: CategoryCreateNestedOneWithoutProductsInput
  carts: CartCreateNestedManyWithoutProductInput
  createdAt: DateTime
  id: String
  orderDetails: OrderDetailCreateNestedManyWithoutProductInput
  pdtCode: String!
  pdtName: String!
  unitPrice: Int!
  updatedAt: DateTime
}

input ProductCreateManyCategoryInput {
  createdAt: DateTime
  id: String
  pdtCode: String!
  pdtName: String!
  unitPrice: Int!
  updatedAt: DateTime
}

input ProductCreateManyCategoryInputEnvelope {
  data: [ProductCreateManyCategoryInput!]
  skipDuplicates: Boolean
}

input ProductCreateNestedManyWithoutCategoryInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutCategoryInput!]
  create: [ProductCreateWithoutCategoryInput!]
  createMany: ProductCreateManyCategoryInputEnvelope
}

input ProductCreateNestedOneWithoutCartsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutCartsInput
  create: ProductCreateWithoutCartsInput
}

input ProductCreateNestedOneWithoutOrderDetailsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutOrderDetailsInput
  create: ProductCreateWithoutOrderDetailsInput
}

input ProductCreateOrConnectWithoutCartsInput {
  create: ProductCreateWithoutCartsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutCategoryInput {
  create: ProductCreateWithoutCategoryInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutOrderDetailsInput {
  create: ProductCreateWithoutOrderDetailsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutCartsInput {
  Category: CategoryCreateNestedOneWithoutProductsInput
  createdAt: DateTime
  id: String
  orderDetails: OrderDetailCreateNestedManyWithoutProductInput
  pdtCode: String!
  pdtName: String!
  unitPrice: Int!
  updatedAt: DateTime
}

input ProductCreateWithoutCategoryInput {
  carts: CartCreateNestedManyWithoutProductInput
  createdAt: DateTime
  id: String
  orderDetails: OrderDetailCreateNestedManyWithoutProductInput
  pdtCode: String!
  pdtName: String!
  unitPrice: Int!
  updatedAt: DateTime
}

input ProductCreateWithoutOrderDetailsInput {
  Category: CategoryCreateNestedOneWithoutProductsInput
  carts: CartCreateNestedManyWithoutProductInput
  createdAt: DateTime
  id: String
  pdtCode: String!
  pdtName: String!
  unitPrice: Int!
  updatedAt: DateTime
}

input ProductScalarWhereInput {
  AND: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  categoryId: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  pdtCode: StringFilter
  pdtName: StringFilter
  unitPrice: IntFilter
  updatedAt: DateTimeFilter
}

input ProductUpdateInput {
  Category: CategoryUpdateOneWithoutProductsInput
  carts: CartUpdateManyWithoutProductInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDetails: OrderDetailUpdateManyWithoutProductInput
  pdtCode: StringFieldUpdateOperationsInput
  pdtName: StringFieldUpdateOperationsInput
  unitPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  pdtCode: StringFieldUpdateOperationsInput
  pdtName: StringFieldUpdateOperationsInput
  unitPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateManyWithWhereWithoutCategoryInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithoutCategoryInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutCategoryInput!]
  create: [ProductCreateWithoutCategoryInput!]
  createMany: ProductCreateManyCategoryInputEnvelope
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ProductUpdateOneRequiredWithoutCartsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutCartsInput
  create: ProductCreateWithoutCartsInput
  update: ProductUpdateWithoutCartsInput
  upsert: ProductUpsertWithoutCartsInput
}

input ProductUpdateOneRequiredWithoutOrderDetailsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutOrderDetailsInput
  create: ProductCreateWithoutOrderDetailsInput
  update: ProductUpdateWithoutOrderDetailsInput
  upsert: ProductUpsertWithoutOrderDetailsInput
}

input ProductUpdateWithWhereUniqueWithoutCategoryInput {
  data: ProductUpdateWithoutCategoryInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithoutCartsInput {
  Category: CategoryUpdateOneWithoutProductsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDetails: OrderDetailUpdateManyWithoutProductInput
  pdtCode: StringFieldUpdateOperationsInput
  pdtName: StringFieldUpdateOperationsInput
  unitPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateWithoutCategoryInput {
  carts: CartUpdateManyWithoutProductInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDetails: OrderDetailUpdateManyWithoutProductInput
  pdtCode: StringFieldUpdateOperationsInput
  pdtName: StringFieldUpdateOperationsInput
  unitPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateWithoutOrderDetailsInput {
  Category: CategoryUpdateOneWithoutProductsInput
  carts: CartUpdateManyWithoutProductInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  pdtCode: StringFieldUpdateOperationsInput
  pdtName: StringFieldUpdateOperationsInput
  unitPrice: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpsertWithWhereUniqueWithoutCategoryInput {
  create: ProductCreateWithoutCategoryInput!
  update: ProductUpdateWithoutCategoryInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithoutCartsInput {
  create: ProductCreateWithoutCartsInput!
  update: ProductUpdateWithoutCartsInput!
}

input ProductUpsertWithoutOrderDetailsInput {
  create: ProductCreateWithoutOrderDetailsInput!
  update: ProductUpdateWithoutOrderDetailsInput!
}

input ProductWhereUniqueInput {
  id: String
}

type Query {
  annualBranchEmployee(where: AnnualBranchEmployeeWhereUniqueInput!): AnnualBranchEmployee
  annualBranchEmployeeByBranchEmployeeAndYear(branchEmployeeId: String, financialYearId: String): AnnualBranchEmployee
  annualBranchEmployeeById(id: String): AnnualBranchEmployee
  annualBranchEmployees(after: AnnualBranchEmployeeWhereUniqueInput, before: AnnualBranchEmployeeWhereUniqueInput, first: Int, last: Int): [AnnualBranchEmployee!]!
  annualClient(where: AnnualClientWhereUniqueInput!): AnnualClient
  annualClientById(id: String): AnnualClient
  annualClientByPhoneAndYear(clientId: String, financialYearId: String): AnnualClient
  annualClientByYearClient(yearClient: String): AnnualClient
  annualClients(after: AnnualClientWhereUniqueInput, before: AnnualClientWhereUniqueInput, first: Int, last: Int): [AnnualClient!]!
  bonus(where: BonusWhereUniqueInput!): Bonus
  bonusById(id: String): Bonus
  bonuses(after: BonusWhereUniqueInput, before: BonusWhereUniqueInput, first: Int, last: Int): [Bonus!]!
  branch(where: BranchWhereUniqueInput!): Branch
  branchByBranchCode(branchCode: String): Branch
  branchById(id: String): Branch
  branchEmployee(where: BranchEmployeeWhereUniqueInput!): BranchEmployee
  branchEmployeeByEmplIdAndBranchId(branchId: String, employeeId: String): BranchEmployee
  branchEmployeeById(id: String): BranchEmployee
  branchEmployees(after: BranchEmployeeWhereUniqueInput, before: BranchEmployeeWhereUniqueInput, first: Int, last: Int): [BranchEmployee!]!
  branches(after: BranchWhereUniqueInput, before: BranchWhereUniqueInput, first: Int, last: Int): [Branch!]!
  cart(where: CartWhereUniqueInput!): Cart
  cartByAnnualClientIdAndEmplId(annualBranchEmployeeId: String, annualClientId: String): [Cart]
  cartById(id: String): Cart
  carts(after: CartWhereUniqueInput, before: CartWhereUniqueInput, first: Int, last: Int): [Cart!]!
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  categoryById(id: String): Category
  client(where: ClientWhereUniqueInput!): Client
  clientById(id: String): [Client]
  clientByPhoneNumber(clientPhoneNumb: Int): Client
  clients: [Client]
  employee(where: EmployeeWhereUniqueInput!): Employee
  employeeByCode(employeeCode: String): Employee
  employeeById(id: String): Employee
  employeeByPhoneNumber(employeePhoneNumb: Int): Employee
  employeeStatus(where: EmployeeStatusWhereUniqueInput!): EmployeeStatus
  employeeStatusById(id: String): EmployeeStatus
  employeeStatuses(after: EmployeeStatusWhereUniqueInput, before: EmployeeStatusWhereUniqueInput, first: Int, last: Int): [EmployeeStatus!]!
  employees(after: EmployeeWhereUniqueInput, before: EmployeeWhereUniqueInput, first: Int, last: Int): [Employee!]!
  finance(where: FinanceWhereUniqueInput!): Finance
  financeById(id: String): Finance
  finances(after: FinanceWhereUniqueInput, before: FinanceWhereUniqueInput, first: Int, last: Int): [Finance!]!
  financialYear(where: FinancialYearWhereUniqueInput!): FinancialYear
  financialYearById(id: String): FinancialYear
  financialYears(id: String): FinancialYear
  inventories(after: InventoryWhereUniqueInput, before: InventoryWhereUniqueInput, first: Int, last: Int): [Inventory!]!
  inventory(where: InventoryWhereUniqueInput!): Inventory
  inventoryById(id: String): Inventory
  order(where: OrderWhereUniqueInput!): Order
  orderById(id: String): Order
  orderDetail(where: OrderDetailWhereUniqueInput!): OrderDetail
  orderDetails(after: OrderDetailWhereUniqueInput, before: OrderDetailWhereUniqueInput, first: Int, last: Int): [OrderDetail!]!
  orders: [Order]
  product(where: ProductWhereUniqueInput!): Product
  productById(id: String): Product
  products: [Product]
  productsByCategoryID(categoryId: String): [Product]
  recentFinancialYear: FinancialYear
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}
